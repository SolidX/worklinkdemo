{"file":"/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx","mappings":";;;;;AAAA,mCAA4C;AAC5C,kDAA0B;AAC1B,wEAA8C;AAC9C,oEAAoC;AAIpC,wCAAwC;AACxC,qFAA6D;AAC7D,sFAA8C;AAE9C,kBAAS,CAAC,EAAE,OAAO,EAAE,IAAI,iCAAO,EAAE,EAAE,CAAC,CAAC;AAEtC,4EAA4E;AAC5E,MAAM,SAAS,GAAG,0BAAc,EAAE,CAAC;AAEnC,oDAAoD;AACpD,sCAAsC;AACtC,4DAA4D;AAC5D,oDAAoD;AACpD,UAAU;AACV,gDAAgD;AAChD,QAAQ;AACR,MAAM;AACN,qGAAqG;AACrG,UAAU,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;AACrB,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,wDAAwD;IACxD,iDAAiD;IACjD,yCAAyC;IACzC,MAAM;IAEN,sEAAsE;IACtE,oCAAoC;IAEpC,MAAM,UAAU,GAAG;QACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;QACrB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;QACvB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;QACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;KACrB,CAAC;IAEF,IAAI,OAAY,EAAE,KAAK,CAAC;IACxB,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,YAAY,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACpD,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;QAChC,OAAO,GAAG,gBAAO,CACf,8BAAC,+BAAqB;QACpB,yCAAyC;QACzC,aAAa;;YADb,yCAAyC;YACzC,aAAa;YACb,UAAU,EAAE,UAAU,GAGtB,EACF,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,CACvB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,oCAAoC;QACpC,MAAM,CAAC,wBAAM,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,oCAAoC;AACpC,yBAAyB;AACzB,2BAA2B;AAC3B,2BAA2B;AAC3B,iBAAiB;AACjB,yBAAyB;AACzB,0BAA0B;AAC1B,6BAA6B;AAC7B,8BAA8B;AAC9B,+BAA+B;AAC/B,2BAA2B;AAC3B,4BAA4B;AAC5B,8BAA8B;AAC9B,uBAAuB;AACvB,0BAA0B;AAC1B,sBAAsB;AACtB,2BAA2B;AAC3B,2BAA2B;AAC3B,OAAO;AACP,0BAA0B;AAC1B,iEAAiE;AACjE,iBAAiB;AACjB,oCAAoC;AACpC,MAAM","names":[],"sources":["/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx"],"sourcesContent":["import { shallow, configure } from 'enzyme';\nimport React from 'react';\nimport configureStore from 'redux-mock-store';\nimport toJson from 'enzyme-to-json';\nimport {} from 'ts-jest';\nimport renderer from 'react-test-renderer';\nimport Props from '../SupervisorQueueScreen';\n// imported as an unconnected component!\nimport SupervisorQueueScreen from '../SupervisorQueueScreen';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n\n// const middlewares = []; // you can mock any middlewares here if necessary\nconst mockStore = configureStore();\n\n// describe('Testing SupervisorQueueScreen', () => {\n//   it('renders as expected', () => {\n//     const wrapper = shallow(<SupervisorQueueScreen  />, {\n//       context: { store: mockStore(initialState) }\n//     });\n//     expect(wrapper.dive()).toMatchSnapshot();\n//   });\n// });\n//jest.mock('react-navigation', ({withNavigation: (component: SupervisorQueueScreen) => component}));\nbeforeEach(() => {});\ndescribe('SupervisorQueueScreen rendering', () => {\n  // const container = shallow(<SupervisorQueueScreen />);\n  // it('should render a <DragContainer/>', () => {\n  //   expect(container).toMatchSnapshot();\n  // });\n\n  //   const tree = renderer.create(<SupervisorQueueScreen />).toJSON();\n  //   expect(tree).toMatchSnapshot();\n\n  const navigation = {\n    navigate: jest.fn(),\n    dispatch: jest.fn(),\n    state: {},\n    goBack: jest.fn(),\n    dismiss: jest.fn(),\n    openDrawer: jest.fn(),\n    closeDrawer: jest.fn(),\n    toggleDrawer: jest.fn(),\n    getParam: jest.fn(),\n    setParams: jest.fn(),\n    addListener: jest.fn(),\n    push: jest.fn(),\n    replace: jest.fn(),\n    pop: jest.fn(),\n    popToTop: jest.fn(),\n    isFocused: jest.fn()\n  };\n\n  let wrapper: any, store;\n  beforeEach(() => {\n    const initialState = { teamMembers: [], error: '' };\n    store = mockStore(initialState);\n    wrapper = shallow(\n      <SupervisorQueueScreen\n        // teamMembers={initialState.teamMembers}\n        // error={''}\n        navigation={navigation}\n        // store={mockStore}\n        // {...props}\n      />,\n      { context: { store } }\n    );\n  });\n\n  it('renders correctly', () => {\n    // const component = wrapper.dive();\n    expect(toJson(wrapper)).toMatchSnapshot();\n  });\n});\n\n// test('renders correctly', () => {\n//   const navigation = {\n//     navigate: jest.fn(),\n//     dispatch: jest.fn(),\n//     state: {},\n//     goBack: jest.fn(),\n//     dismiss: jest.fn(),\n//     openDrawer: jest.fn(),\n//     closeDrawer: jest.fn(),\n//     toggleDrawer: jest.fn(),\n//     getParam: jest.fn(),\n//     setParams: jest.fn(),\n//     addListener: jest.fn(),\n//     push: jest.fn(),\n//     replace: jest.fn(),\n//     pop: jest.fn(),\n//     popToTop: jest.fn(),\n//     isFocused: jest.fn()\n//   };\n//   const tree = renderer\n//     .create(<SupervisorQueueScreen navigation={navigation} />)\n//     .toJSON();\n//   expect(tree).toMatchSnapshot();\n// });\n"],"version":3}