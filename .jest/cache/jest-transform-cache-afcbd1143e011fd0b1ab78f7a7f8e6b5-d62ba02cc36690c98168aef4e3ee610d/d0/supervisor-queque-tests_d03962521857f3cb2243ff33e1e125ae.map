{"file":"/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx","mappings":";;;;;AAAA,mCAAiC;AACjC,kDAA0B;AAC1B,wEAA8C;AAC9C,oEAAoC;AAKpC,wCAAwC;AACxC,qFAA6D;AAE7D,4EAA4E;AAC5E,MAAM,SAAS,GAAG,0BAAc,EAAE,CAAC;AAEnC,MAAM,YAAY,GAAG;IACnB,WAAW,EAAE,EAAE;IACf,KAAK,EAAE,EAAE;CACV,CAAC;AAEF,oDAAoD;AACpD,sCAAsC;AACtC,4DAA4D;AAC5D,oDAAoD;AACpD,UAAU;AACV,gDAAgD;AAChD,QAAQ;AACR,MAAM;AACN,qGAAqG;AAErG,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,wDAAwD;IACxD,iDAAiD;IACjD,yCAAyC;IACzC,MAAM;IACN,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,sEAAsE;QACtE,oCAAoC;QAEpC,MAAM,UAAU,GAAG;YACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;YACrB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;YACvB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;YACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;SACrB,CAAC;QAEF,MAAM,OAAO,GAAG,gBAAO,CACrB,8BAAC,+BAAqB;QACpB,kBAAkB;QAClB,YAAY;;YADZ,kBAAkB;YAClB,YAAY;YACZ,UAAU,EAAE,UAAU,GAEtB,CACH,CAAC;QACF,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACjC,MAAM,CAAC,wBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,oCAAoC;AACpC,yBAAyB;AACzB,2BAA2B;AAC3B,2BAA2B;AAC3B,iBAAiB;AACjB,yBAAyB;AACzB,0BAA0B;AAC1B,6BAA6B;AAC7B,8BAA8B;AAC9B,+BAA+B;AAC/B,2BAA2B;AAC3B,4BAA4B;AAC5B,8BAA8B;AAC9B,uBAAuB;AACvB,0BAA0B;AAC1B,sBAAsB;AACtB,2BAA2B;AAC3B,2BAA2B;AAC3B,OAAO;AACP,0BAA0B;AAC1B,iEAAiE;AACjE,iBAAiB;AACjB,oCAAoC;AACpC,MAAM","names":[],"sources":["/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx"],"sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport configureStore from 'redux-mock-store';\nimport toJson from 'enzyme-to-json';\nimport {} from 'ts-jest';\nimport renderer from 'react-test-renderer';\nimport Props from '../SupervisorQueueScreen';\n\n// imported as an unconnected component!\nimport SupervisorQueueScreen from '../SupervisorQueueScreen';\n\n// const middlewares = []; // you can mock any middlewares here if necessary\nconst mockStore = configureStore();\n\nconst initialState = {\n  teamMembers: [],\n  error: ''\n};\n\n// describe('Testing SupervisorQueueScreen', () => {\n//   it('renders as expected', () => {\n//     const wrapper = shallow(<SupervisorQueueScreen  />, {\n//       context: { store: mockStore(initialState) }\n//     });\n//     expect(wrapper.dive()).toMatchSnapshot();\n//   });\n// });\n//jest.mock('react-navigation', ({withNavigation: (component: SupervisorQueueScreen) => component}));\n\ndescribe('SupervisorQueueScreen rendering', () => {\n  // const container = shallow(<SupervisorQueueScreen />);\n  // it('should render a <DragContainer/>', () => {\n  //   expect(container).toMatchSnapshot();\n  // });\n  it('renders correctly', () => {\n    //   const tree = renderer.create(<SupervisorQueueScreen />).toJSON();\n    //   expect(tree).toMatchSnapshot();\n\n    const navigation = {\n      navigate: jest.fn(),\n      dispatch: jest.fn(),\n      state: {},\n      goBack: jest.fn(),\n      dismiss: jest.fn(),\n      openDrawer: jest.fn(),\n      closeDrawer: jest.fn(),\n      toggleDrawer: jest.fn(),\n      getParam: jest.fn(),\n      setParams: jest.fn(),\n      addListener: jest.fn(),\n      push: jest.fn(),\n      replace: jest.fn(),\n      pop: jest.fn(),\n      popToTop: jest.fn(),\n      isFocused: jest.fn()\n    };\n\n    const wrapper = shallow(\n      <SupervisorQueueScreen\n        //teamMembers={[]}\n        //error={''}\n        navigation={navigation}\n        // {...props}\n      />\n    );\n    const component = wrapper.dive();\n    expect(toJson(component)).toMatchSnapshot();\n  });\n});\n\n// test('renders correctly', () => {\n//   const navigation = {\n//     navigate: jest.fn(),\n//     dispatch: jest.fn(),\n//     state: {},\n//     goBack: jest.fn(),\n//     dismiss: jest.fn(),\n//     openDrawer: jest.fn(),\n//     closeDrawer: jest.fn(),\n//     toggleDrawer: jest.fn(),\n//     getParam: jest.fn(),\n//     setParams: jest.fn(),\n//     addListener: jest.fn(),\n//     push: jest.fn(),\n//     replace: jest.fn(),\n//     pop: jest.fn(),\n//     popToTop: jest.fn(),\n//     isFocused: jest.fn()\n//   };\n//   const tree = renderer\n//     .create(<SupervisorQueueScreen navigation={navigation} />)\n//     .toJSON();\n//   expect(tree).toMatchSnapshot();\n// });\n"],"version":3}