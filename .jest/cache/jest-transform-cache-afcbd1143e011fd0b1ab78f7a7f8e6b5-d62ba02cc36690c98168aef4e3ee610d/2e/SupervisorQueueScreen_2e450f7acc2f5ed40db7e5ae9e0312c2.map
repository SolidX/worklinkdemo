{"file":"/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/SupervisorQueueScreen.tsx","mappings":";;;;;;;;;;;;AAAA,+CAAyC;AACzC,kFAA0D;AAC1D,4EAAoD;AACpD,8EAAsD;AACtD,0EAAkD;AAClD,8EAAsD;AACtD,gFAAwD;AACxD,4EAAoD;AACpD,+GAAkF;AAClF,gGAAwE;AACxE,yGAAiF;AACjF,sFAA8D;AAE9D,yEAA0E;AAC1E,6CAAsC;AAItC,+DAAqE;AAkBrE,2BAA4B,SAAQ,iBAAgB;IAApD;;QACE,UAAK,GAAG;YACN,SAAS,EAAE,EAAE;YACb,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,iBAAY,GAAG,CAAC,EAAU,EAAE,EAAE;YAC5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;YACpC,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC;QACF,aAAQ,GAAG,GAAG,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC;QASF,oBAAe,GAAG,GAAG,EAAE;YACrB,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC;IA4DJ,CAAC;IArEC,yCAAyC;IACzC,+CAA+C;IAC/C,KAAK;IACL,iBAAiB;QACf,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACtC,CAAC;IAID,MAAM;QACJ,MAAM,EAAE,WAAW,EAAE,mBAAmB,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpE,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,OAAO,CACL,8BAAC,yBAAa,IACZ,SAAS,EAAE,WAAW;YACtB,yCAAyC;YACzC,eAAe,EAAE,IAAI,CAAC,eAAe,EACrC,WAAW,EAAE,GAAG,EAAE;gBAChB,+DAA+D;gBAC/D,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1C,CAAC,EACD,SAAS,EAAE,GAAG,EAAE;gBACd,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE;oBACrB,qEAAqE;oBACrE,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,EAAE;wBACrC,mBAAmB,CAAC,SAAS,CAAC,CAAC;wBAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;qBACjB;yBAAM;wBACL,IAAI,CAAC,QAAQ,EAAE,CAAC;qBACjB;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,8BAAC,sBAAY;gBAIX,8BAAC,mBAAS;oBACR,8BAAC,oBAAU;wBACT,8BAAC,8BAAe,wBAAgC,CACrC;oBACb,8BAAC,kBAAQ;wBACP,8BAAC,4BAAkB,IACjB,UAAU,EAAE,UAAU,EACtB,aAAa,EAAE,IAAI,CAAC,eAAe,GACnC,CACO,CACD;gBAIZ,8BAAC,oBAAU;oBACT,8BAAC,qBAAW;wBACV,8BAAC,sBAAY,oBAAyB,CAC1B;oBACd,8BAAC,mBAAS;wBACR,8BAAC,kBAAQ,IACP,gBAAgB,EAAE,mBAAmB,EACrC,SAAS,EAAE,WAAW,EACtB,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,GAC/B,CACQ,CACD,CACA,CACD,CACjB,CAAC;IACJ,CAAC;CACF;AAED,MAAM,eAAe,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC1D,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAA4B,EAAE,CAAC,CAAC;IAC5E,mBAAmB,EAAE,CAAC,QAAgB,EAAE,EAAE,CACxC,QAAQ,CAAC,0BAAgB,CAAC,QAAQ,CAAC,CAAC;CACvC,CAAC,CAAC;AACH,kBAAe,qBAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,qBAAqB,CAAC,CAAC","names":[],"sources":["/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/SupervisorQueueScreen.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport AppContainer from '../common/AppBody/AppContainer';\nimport LeftPanel from '../common/AppBody/LeftPanel';\nimport LeftHeader from '../common/AppBody/LeftHeader';\nimport LeftBody from '../common/AppBody/LeftBody';\nimport RightPanel from '../common/AppBody/RightPanel';\nimport RightHeader from '../common/AppBody/RightHeader';\nimport RightBody from '../common/AppBody/RightBody';\nimport WorkOrderHeader from '../components/LeftPanel/Header/SuperWorkOrderHeader';\nimport ActionHeader from '../components/RightPanel/Header/ActionHeader';\nimport SuperWorkOrderList from '../components/LeftPanel/Body/SuperWorkOrderList';\nimport TeamList from '../components/RightPanel/Body/TeamList';\nimport { NavigationScreenProp } from 'react-navigation';\nimport { DragContainer } from '../utils/react-native-drag-drop/index.jsx';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../../src/Redux';\nimport { ITeamMember } from '../../../src/Redux/drag-and-drop/types';\nimport { toggleTeamMember } from '../../Redux/drag-and-drop/actions';\n\nexport interface ISuperQueueNavProps {\n  navigation: NavigationScreenProp<any, any>;\n}\n\nexport interface ISuperQueueProps {\n  teamMembers: ITeamMember[];\n  error: string;\n}\nexport interface ISuperQueueDispatchProps {\n  onTeamMemberClicked(memberId: string): void;\n}\n\nexport type Props = ISuperQueueProps &\n  ISuperQueueNavProps &\n  ISuperQueueDispatchProps;\n\nclass SupervisorQueueScreen extends Component<Props> {\n  state = {\n    currentId: '',\n    droppedInZone: null\n  };\n\n  addCurrentId = (id: string) => {\n    console.log('added current Id', id);\n    this.setState({ currentId: id });\n  };\n  removeId = () => {\n    this.setState({ currentId: '' });\n  };\n\n  // toggleScroll = (visible: boolean) => {\n  //   this.setState({ scrollEnabled: visible });\n  // };\n  componentDidMount() {\n    const teamArray = this.props.teamMembers;\n    console.log('teamArray', teamArray);\n  }\n  isDroppedInZone = () => {\n    this.setState({ droppedInZone: true });\n  };\n  render() {\n    const { teamMembers, onTeamMemberClicked, navigation } = this.props;\n    const { currentId } = this.state;\n    return (\n      <DragContainer\n        teamArray={teamMembers}\n        // selectTeamMember={onTeamMemberClicked}\n        isDroppedInZone={this.isDroppedInZone}\n        onDragStart={() => {\n          // if only one teamMember is dragged then add them to teamArray\n          this.setState({ droppedInZone: false });\n        }}\n        onDragEnd={() => {\n          this.setState({}, () => {\n            // was teamMember dropped on workOrder?, if not remove from teamArray\n            if (this.state.droppedInZone == false) {\n              onTeamMemberClicked(currentId);\n              this.removeId();\n            } else {\n              this.removeId();\n            }\n          });\n        }}\n      >\n        <AppContainer>\n          {/* ========\n             LEFT\n        ======== */}\n          <LeftPanel>\n            <LeftHeader>\n              <WorkOrderHeader>My HVAC Queue</WorkOrderHeader>\n            </LeftHeader>\n            <LeftBody>\n              <SuperWorkOrderList\n                navigation={navigation}\n                droppedInZone={this.isDroppedInZone}\n              />\n            </LeftBody>\n          </LeftPanel>\n          {/* ========\n             RIGHT\n        ======== */}\n          <RightPanel>\n            <RightHeader>\n              <ActionHeader>HVAC Team</ActionHeader>\n            </RightHeader>\n            <RightBody>\n              <TeamList\n                selectTeamMember={onTeamMemberClicked}\n                teamArray={teamMembers}\n                addCurrentId={this.addCurrentId}\n                currentId={this.state.currentId}\n              />\n            </RightBody>\n          </RightPanel>\n        </AppContainer>\n      </DragContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IState) => state.dragDrop;\nconst mapDispatchToProps = (dispatch: Dispatch): ISuperQueueDispatchProps => ({\n  onTeamMemberClicked: (memberId: string) =>\n    dispatch(toggleTeamMember(memberId))\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SupervisorQueueScreen);\n"],"version":3}