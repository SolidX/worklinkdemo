de838bf20843ac3cc76e60cd24dc84a2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("./types");

exports.initialState = {
  teamMembers: [],
  error: ''
};

exports.reducer = (state = exports.initialState, action) => {
  const {
    teamMembers
  } = state;
  const ADD = types_1.ActionTypes.ADD_TEAM_MEMBER;
  const REMOVE = types_1.ActionTypes.REMOVE_TEAM_MEMBER;
  let memberId;

  switch (action.type) {
    case ADD:
      memberId = action.payload.memberId; // check if member is already in the team

      const memberIdPresent = teamMembers.some(member => member.id === memberId);
      console.log('outside!!', teamMembers, memberId, action.type); // add member if not already there

      if (!memberIdPresent && ADD) {
        console.log('addddd');
        return Object.assign({}, state, {
          teamMembers: [...state.teamMembers, {
            id: action.payload.memberId
          }]
        }); // remove member if already there
      } else if (memberIdPresent && REMOVE) {
        console.log('removveee');
        return Object.assign({}, state, {
          teamMembers: teamMembers.filter(member => member.id !== memberId)
        });
      } else {
        return Object.assign({}, state, {
          error: 'oops'
        });
      }

    case REMOVE:
      memberId = action.payload.memberId;
      return Object.assign({}, state, {
        teamMembers: teamMembers.filter(member => member.id !== memberId)
      });

    default:
      return state;
  }
}; //# sourceMappingURL=reducers.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBR2EsT0FBQSxDQUFBLFlBQUEsR0FBaUM7QUFDNUMsRUFBQSxXQUFXLEVBQUUsRUFEK0I7QUFFNUMsRUFBQSxLQUFLLEVBQUU7QUFGcUMsQ0FBakM7O0FBS0EsT0FBQSxDQUFBLE9BQUEsR0FBVSxDQUNyQixLQUFBLEdBQTBCLE9BQUEsQ0FBQSxZQURMLEVBRXJCLE1BRnFCLEtBR25CO0FBQ0YsUUFBTTtBQUFFLElBQUE7QUFBRixNQUFrQixLQUF4QjtBQUNBLFFBQU0sR0FBRyxHQUFHLE9BQUEsQ0FBQSxXQUFBLENBQVksZUFBeEI7QUFDQSxRQUFNLE1BQU0sR0FBRyxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQUEzQjtBQUNBLE1BQUksUUFBSjs7QUFDQSxVQUFRLE1BQU0sQ0FBQyxJQUFmO0FBQ0UsU0FBSyxHQUFMO0FBQ0UsTUFBQSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxRQUExQixDQURGLENBRUU7O0FBQ0EsWUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLElBQVosQ0FDdEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFQLEtBQWMsUUFERixDQUF4QjtBQUdBLE1BQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCLFdBQXpCLEVBQXNDLFFBQXRDLEVBQWdELE1BQU0sQ0FBQyxJQUF2RCxFQU5GLENBUUU7O0FBQ0EsVUFBSSxDQUFDLGVBQUQsSUFBb0IsR0FBeEIsRUFBNkI7QUFDM0IsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsV0FBVixFQUF1QjtBQUFFLFlBQUEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFQLENBQWU7QUFBckIsV0FBdkI7QUFETCxTQURWLENBQUEsQ0FIMkIsQ0FPM0I7QUFDRCxPQVJELE1BUU8sSUFBSSxlQUFlLElBQUksTUFBdkIsRUFBK0I7QUFDcEMsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLFdBQVcsQ0FBQyxNQUFaLENBQW1CLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBUCxLQUFjLFFBQTNDO0FBREwsU0FEVixDQUFBO0FBSUQsT0FQTSxNQU9BO0FBQ0wsZUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxLQUFaLEVBQWlCO0FBQUUsVUFBQSxLQUFLLEVBQUU7QUFBVCxTQUFqQixDQUFBO0FBQ0Q7O0FBQ0gsU0FBSyxNQUFMO0FBQ0UsTUFBQSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxRQUExQjtBQUNBLGFBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQ0ssS0FETCxFQUNVO0FBQ1IsUUFBQSxXQUFXLEVBQUUsV0FBVyxDQUFDLE1BQVosQ0FBbUIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFQLEtBQWMsUUFBM0M7QUFETCxPQURWLENBQUE7O0FBSUY7QUFDRSxhQUFPLEtBQVA7QUFuQ0o7QUFxQ0QsQ0E3Q1ksQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgSVN1cGVyUXVldWVQcm9wcyB9IGZyb20gJy4uLy4uL1JlYWN0L3NjcmVlbnMvU3VwZXJ2aXNvclF1ZXVlU2NyZWVuJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogSVN1cGVyUXVldWVQcm9wcyA9IHtcbiAgdGVhbU1lbWJlcnM6IFtdLFxuICBlcnJvcjogJydcbn07XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyID0gKFxuICBzdGF0ZTogSVN1cGVyUXVldWVQcm9wcyA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOiBBY3Rpb25cbikgPT4ge1xuICBjb25zdCB7IHRlYW1NZW1iZXJzIH0gPSBzdGF0ZTtcbiAgY29uc3QgQUREID0gQWN0aW9uVHlwZXMuQUREX1RFQU1fTUVNQkVSO1xuICBjb25zdCBSRU1PVkUgPSBBY3Rpb25UeXBlcy5SRU1PVkVfVEVBTV9NRU1CRVI7XG4gIGxldCBtZW1iZXJJZDtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUREOlxuICAgICAgbWVtYmVySWQgPSBhY3Rpb24ucGF5bG9hZC5tZW1iZXJJZDtcbiAgICAgIC8vIGNoZWNrIGlmIG1lbWJlciBpcyBhbHJlYWR5IGluIHRoZSB0ZWFtXG4gICAgICBjb25zdCBtZW1iZXJJZFByZXNlbnQgPSB0ZWFtTWVtYmVycy5zb21lKFxuICAgICAgICBtZW1iZXIgPT4gbWVtYmVyLmlkID09PSBtZW1iZXJJZFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKCdvdXRzaWRlISEnLCB0ZWFtTWVtYmVycywgbWVtYmVySWQsIGFjdGlvbi50eXBlKTtcblxuICAgICAgLy8gYWRkIG1lbWJlciBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgaWYgKCFtZW1iZXJJZFByZXNlbnQgJiYgQUREKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZGRkZGQnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiBbLi4uc3RhdGUudGVhbU1lbWJlcnMsIHsgaWQ6IGFjdGlvbi5wYXlsb2FkLm1lbWJlcklkIH1dXG4gICAgICAgIH07XG4gICAgICAgIC8vIHJlbW92ZSBtZW1iZXIgaWYgYWxyZWFkeSB0aGVyZVxuICAgICAgfSBlbHNlIGlmIChtZW1iZXJJZFByZXNlbnQgJiYgUkVNT1ZFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdnZlZWUnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci5pZCAhPT0gbWVtYmVySWQpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6ICdvb3BzJyB9O1xuICAgICAgfVxuICAgIGNhc2UgUkVNT1ZFOlxuICAgICAgbWVtYmVySWQgPSBhY3Rpb24ucGF5bG9hZC5tZW1iZXJJZDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0ZWFtTWVtYmVyczogdGVhbU1lbWJlcnMuZmlsdGVyKG1lbWJlciA9PiBtZW1iZXIuaWQgIT09IG1lbWJlcklkKVxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==