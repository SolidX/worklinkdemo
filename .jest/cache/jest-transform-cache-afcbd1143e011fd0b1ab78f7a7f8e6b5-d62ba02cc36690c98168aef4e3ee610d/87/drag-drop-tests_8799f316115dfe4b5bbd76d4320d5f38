d38cc8fdf15712fef29bcf0eeaf6cf1a
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types");

describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.TOGGLE_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.toggleTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    // expect(reducer(initialState, receiveRepos.success(data))).toMatchSnapshot();
    expect(reducers_1.reducer(undefined, {})).toEqual(Object.assign({}, reducers_1.initialState));
  });
  it('should add member id', () => {
    expect(reducers_1.reducer(Object.assign({}, reducers_1.initialState), {
      type: types_1.ActionTypes.TOGGLE_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
  it('should remove member id', () => {
    expect(reducers_1.reducer({
      teamMembers: [{
        id: '1800004'
      }, {
        id: '1800008'
      }],
      error: ''
    }, {
      type: types_1.ActionTypes.TOGGLE_TEAM_MEMBER,
      payload: {
        memberId: '1800008'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWctZHJvcC10ZXN0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQTs7QUFFQSxRQUFRLENBQUMsbUJBQUQsRUFBc0IsTUFBSztBQUNqQyxFQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxNQUFLO0FBQzVELFVBQU0sUUFBUSxHQUFHLFVBQWpCO0FBQ0EsVUFBTSxjQUFjLEdBQUc7QUFDckIsTUFBQSxJQUFJLEVBQUUsT0FBQSxDQUFBLFdBQUEsQ0FBWSxrQkFERztBQUVyQixNQUFBLE9BQU8sRUFBRTtBQUFFLFFBQUE7QUFBRjtBQUZZLEtBQXZCO0FBSUEsSUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFSLENBQXlCLFFBQXpCLENBQUQsQ0FBTixDQUEyQyxPQUEzQyxDQUFtRCxjQUFuRCxFQU40RCxDQU81RDtBQUNELEdBUkMsQ0FBRjtBQVNELENBVk8sQ0FBUjtBQVlBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixNQUFLO0FBQ2xDLEVBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQUs7QUFDekM7QUFDQSxJQUFBLE1BQU0sQ0FBQyxVQUFBLENBQUEsT0FBQSxDQUFRLFNBQVIsRUFBbUIsRUFBbkIsQ0FBRCxDQUFOLENBQStCLE9BQS9CLENBQXNDLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNqQyxVQUFBLENBQUEsWUFEaUMsQ0FBdEM7QUFHRCxHQUxDLENBQUY7QUFNQSxFQUFBLEVBQUUsQ0FBQyxzQkFBRCxFQUF5QixNQUFLO0FBQzlCLElBQUEsTUFBTSxDQUNKLFVBQUEsQ0FBQSxPQUFBLENBQU8sTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBRUEsVUFBQSxDQUFBLFlBRkEsQ0FBUCxFQUlFO0FBQ0UsTUFBQSxJQUFJLEVBQUUsT0FBQSxDQUFBLFdBQUEsQ0FBWSxrQkFEcEI7QUFFRSxNQUFBLE9BQU8sRUFBRTtBQUNQLFFBQUEsUUFBUSxFQUFFO0FBREg7QUFGWCxLQUpGLENBREksQ0FBTixDQVlFLE9BWkYsQ0FZVTtBQUNSLE1BQUEsV0FBVyxFQUFFLENBQUM7QUFBRSxRQUFBLEVBQUUsRUFBRTtBQUFOLE9BQUQsQ0FETDtBQUVSLE1BQUEsS0FBSyxFQUFFO0FBRkMsS0FaVjtBQWdCRCxHQWpCQyxDQUFGO0FBbUJBLEVBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCLE1BQUs7QUFDakMsSUFBQSxNQUFNLENBQ0osVUFBQSxDQUFBLE9BQUEsQ0FDRTtBQUNFLE1BQUEsV0FBVyxFQUFFLENBQUM7QUFBRSxRQUFBLEVBQUUsRUFBRTtBQUFOLE9BQUQsRUFBb0I7QUFBRSxRQUFBLEVBQUUsRUFBRTtBQUFOLE9BQXBCLENBRGY7QUFFRSxNQUFBLEtBQUssRUFBRTtBQUZULEtBREYsRUFLRTtBQUNFLE1BQUEsSUFBSSxFQUFFLE9BQUEsQ0FBQSxXQUFBLENBQVksa0JBRHBCO0FBRUUsTUFBQSxPQUFPLEVBQUU7QUFDUCxRQUFBLFFBQVEsRUFBRTtBQURIO0FBRlgsS0FMRixDQURJLENBQU4sQ0FhRSxPQWJGLENBYVU7QUFDUixNQUFBLFdBQVcsRUFBRSxDQUFDO0FBQUUsUUFBQSxFQUFFLEVBQUU7QUFBTixPQUFELENBREw7QUFFUixNQUFBLEtBQUssRUFBRTtBQUZDLEtBYlY7QUFpQkQsR0FsQkMsQ0FBRjtBQW1CRCxDQTdDTyxDQUFSLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0aWFsU3RhdGUsIHJlZHVjZXIgfSBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL3JlZHVjZXJzJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC9hY3Rpb25zJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC90eXBlcyc7XG5cbmRlc2NyaWJlKCdkcmFnLWRyb3AgYWN0aW9ucycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gYWN0aW9uIHRvIHNlbGVjdCBhIHRlYW0gbWVtYmVyIGlkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1lbWJlcklkID0gJzE4MDAwMDAzJztcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlRPR0dMRV9URUFNX01FTUJFUixcbiAgICAgIHBheWxvYWQ6IHsgbWVtYmVySWQgfVxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMudG9nZ2xlVGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICAgIC8vIGV4cGVjdChyZWR1Y2VyKGluaXRpYWxTdGF0ZSwgc2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2RyYWctZHJvcCByZWR1Y2VycycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgLy8gZXhwZWN0KHJlZHVjZXIoaW5pdGlhbFN0YXRlLCByZWNlaXZlUmVwb3Muc3VjY2VzcyhkYXRhKSkpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIGV4cGVjdChyZWR1Y2VyKHVuZGVmaW5lZCwge30pKS50b0VxdWFsKHtcbiAgICAgIC4uLmluaXRpYWxTdGF0ZVxuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBhZGQgbWVtYmVyIGlkJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlZHVjZXIoXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5pbml0aWFsU3RhdGVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlRPR0dMRV9URUFNX01FTUJFUixcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZW1iZXJJZDogJzE4MDAwMDQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApXG4gICAgKS50b0VxdWFsKHtcbiAgICAgIHRlYW1NZW1iZXJzOiBbeyBpZDogJzE4MDAwMDQnIH1dLFxuICAgICAgZXJyb3I6ICcnXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVtb3ZlIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKFxuICAgICAgICB7XG4gICAgICAgICAgdGVhbU1lbWJlcnM6IFt7IGlkOiAnMTgwMDAwNCcgfSwgeyBpZDogJzE4MDAwMDgnIH1dLFxuICAgICAgICAgIGVycm9yOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuVE9HR0xFX1RFQU1fTUVNQkVSLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lbWJlcklkOiAnMTgwMDAwOCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApLnRvRXF1YWwoe1xuICAgICAgdGVhbU1lbWJlcnM6IFt7IGlkOiAnMTgwMDAwNCcgfV0sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=