a40b5c0eba925acb1ea52c5403716052
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.addTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.REMOVE_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.removeTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual({
      teamMembers: [],
      error: ''
    });
  });
  it('should handle ADD_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [],
      error: ''
    }, {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
  it('should handle REMOVE_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    }, {
      type: types_1.ActionTypes.REMOVE_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [],
      error: ''
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBaUJELEdBbEJDLENBQUY7QUFtQkQsQ0E3Q08sQ0FBUixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSwgcmVkdWNlciB9IGZyb20gJy4uL2RyYWctYW5kLWRyb3AvcmVkdWNlcnMnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL2FjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL3R5cGVzJztcblxuLy8gaW1wb3J0IHsgdGVhbU1lbWJlcnMsIG1lbWJlcklkIH0gZnJvbSAnLi4vLi4vY29uZmlnL2plc3QvbW9ja0RhdGEnO1xuXG5kZXNjcmliZSgnZHJhZy1kcm9wIGFjdGlvbnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFjdGlvbiB0byBzZWxlY3QgYSB0ZWFtIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBjb25zdCBtZW1iZXJJZCA9ICcxODAwMDAwMyc7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BRERfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLmFkZFRlYW1NZW1iZXIobWVtYmVySWQpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9uKTtcbiAgICAvLyBleHBlY3QocmVkdWNlcihpbml0aWFsU3RhdGUsIHNlbGVjdFRlYW1NZW1iZXIobWVtYmVySWQpKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBhY3Rpb24gdG8gcmVtb3ZlIGEgdGVhbSBtZW1iZXIgaWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbWVtYmVySWQgPSAnMTgwMDAwMDMnO1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0ge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVNT1ZFX1RFQU1fTUVNQkVSLFxuICAgICAgcGF5bG9hZDogeyBtZW1iZXJJZCB9XG4gICAgfTtcbiAgICBleHBlY3QoYWN0aW9ucy5yZW1vdmVUZWFtTWVtYmVyKG1lbWJlcklkKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkcmFnLWRyb3AgcmVkdWNlcnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZWR1Y2VyKHVuZGVmaW5lZCwge30pKS50b0VxdWFsKHtcbiAgICAgIHRlYW1NZW1iZXJzOiBbXSxcbiAgICAgIGVycm9yOiAnJ1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgQUREX1RFQU1fTUVNQkVSJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlZHVjZXIoXG4gICAgICAgIHtcbiAgICAgICAgICB0ZWFtTWVtYmVyczogW10sXG4gICAgICAgICAgZXJyb3I6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BRERfVEVBTV9NRU1CRVIsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgbWVtYmVySWQ6ICcxODAwMDA0J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgICkudG9FcXVhbCh7XG4gICAgICB0ZWFtTWVtYmVyczogW3sgaWQ6ICcxODAwMDA0JyB9XSxcbiAgICAgIGVycm9yOiAnJ1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgUkVNT1ZFX1RFQU1fTUVNQkVSJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlZHVjZXIoXG4gICAgICAgIHtcbiAgICAgICAgICB0ZWFtTWVtYmVyczogW3sgaWQ6ICcxODAwMDA0JyB9XSxcbiAgICAgICAgICBlcnJvcjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFTU9WRV9URUFNX01FTUJFUixcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZW1iZXJJZDogJzE4MDAwMDQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApXG4gICAgKS50b0VxdWFsKHtcbiAgICAgIHRlYW1NZW1iZXJzOiBbXSxcbiAgICAgIGVycm9yOiAnJ1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==