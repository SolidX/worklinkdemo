8f69dde624ec5043028cc41b56653122
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.SELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.selectTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.UNSELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.unSelectTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual({
      teamMembers: [],
      error: ''
    });
  });
  it('should handle SELECT_TEAM_MEMBER', () => {
    expect(reducers_1.reducer([], {
      type: types_1.ActionTypes.SELECT_TEAM_MEMBER,
      memberId: '1800004'
    })).toEqual({
      teamMembers: ['1800004']
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWctZHJvcC10ZXN0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQSxDLENBRUE7OztBQUVBLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixNQUFLO0FBQ2pDLEVBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELE1BQUs7QUFDNUQsVUFBTSxRQUFRLEdBQUcsVUFBakI7QUFDQSxVQUFNLGNBQWMsR0FBRztBQUNyQixNQUFBLElBQUksRUFBRSxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQURHO0FBRXJCLE1BQUEsT0FBTyxFQUFFO0FBQUUsUUFBQTtBQUFGO0FBRlksS0FBdkI7QUFJQSxJQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsUUFBekIsQ0FBRCxDQUFOLENBQTJDLE9BQTNDLENBQW1ELGNBQW5ELEVBTjRELENBTzVEO0FBQ0QsR0FSQyxDQUFGO0FBU0EsRUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsTUFBSztBQUM1RCxVQUFNLFFBQVEsR0FBRyxVQUFqQjtBQUNBLFVBQU0sY0FBYyxHQUFHO0FBQ3JCLE1BQUEsSUFBSSxFQUFFLE9BQUEsQ0FBQSxXQUFBLENBQVksb0JBREc7QUFFckIsTUFBQSxPQUFPLEVBQUU7QUFBRSxRQUFBO0FBQUY7QUFGWSxLQUF2QjtBQUlBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBUixDQUEyQixRQUEzQixDQUFELENBQU4sQ0FBNkMsT0FBN0MsQ0FBcUQsY0FBckQ7QUFDRCxHQVBDLENBQUY7QUFRRCxDQWxCTyxDQUFSO0FBb0JBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixNQUFLO0FBQ2xDLEVBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQUs7QUFDekMsSUFBQSxNQUFNLENBQUMsVUFBQSxDQUFBLE9BQUEsQ0FBUSxTQUFSLEVBQW1CLEVBQW5CLENBQUQsQ0FBTixDQUErQixPQUEvQixDQUF1QztBQUNyQyxNQUFBLFdBQVcsRUFBRSxFQUR3QjtBQUVyQyxNQUFBLEtBQUssRUFBRTtBQUY4QixLQUF2QztBQUlELEdBTEMsQ0FBRjtBQU1BLEVBQUEsRUFBRSxDQUFDLGtDQUFELEVBQXFDLE1BQUs7QUFDMUMsSUFBQSxNQUFNLENBQ0osVUFBQSxDQUFBLE9BQUEsQ0FBUSxFQUFSLEVBQVk7QUFDVixNQUFBLElBQUksRUFBRSxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQURSO0FBRVYsTUFBQSxRQUFRLEVBQUU7QUFGQSxLQUFaLENBREksQ0FBTixDQUtFLE9BTEYsQ0FLVTtBQUNSLE1BQUEsV0FBVyxFQUFFLENBQUMsU0FBRDtBQURMLEtBTFY7QUFRRCxHQVRDLENBQUY7QUFVRCxDQWpCTyxDQUFSLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlLCByZWR1Y2VyIH0gZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC9yZWR1Y2Vycyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL2RyYWctYW5kLWRyb3AvYWN0aW9ucyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2RyYWctYW5kLWRyb3AvdHlwZXMnO1xuXG4vLyBpbXBvcnQgeyB0ZWFtTWVtYmVycywgbWVtYmVySWQgfSBmcm9tICcuLi8uLi9jb25maWcvamVzdC9tb2NrRGF0YSc7XG5cbmRlc2NyaWJlKCdkcmFnLWRyb3AgYWN0aW9ucycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gYWN0aW9uIHRvIHNlbGVjdCBhIHRlYW0gbWVtYmVyIGlkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1lbWJlcklkID0gJzE4MDAwMDAzJztcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlNFTEVDVF9URUFNX01FTUJFUixcbiAgICAgIHBheWxvYWQ6IHsgbWVtYmVySWQgfVxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMuc2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICAgIC8vIGV4cGVjdChyZWR1Y2VyKGluaXRpYWxTdGF0ZSwgc2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFjdGlvbiB0byByZW1vdmUgYSB0ZWFtIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBjb25zdCBtZW1iZXJJZCA9ICcxODAwMDAwMyc7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5VTlNFTEVDVF9URUFNX01FTUJFUixcbiAgICAgIHBheWxvYWQ6IHsgbWVtYmVySWQgfVxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMudW5TZWxlY3RUZWFtTWVtYmVyKG1lbWJlcklkKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbik7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkcmFnLWRyb3AgcmVkdWNlcnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZWR1Y2VyKHVuZGVmaW5lZCwge30pKS50b0VxdWFsKHtcbiAgICAgIHRlYW1NZW1iZXJzOiBbXSxcbiAgICAgIGVycm9yOiAnJ1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgU0VMRUNUX1RFQU1fTUVNQkVSJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlZHVjZXIoW10sIHtcbiAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuU0VMRUNUX1RFQU1fTUVNQkVSLFxuICAgICAgICBtZW1iZXJJZDogJzE4MDAwMDQnXG4gICAgICB9KVxuICAgICkudG9FcXVhbCh7XG4gICAgICB0ZWFtTWVtYmVyczogWycxODAwMDA0J11cbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=