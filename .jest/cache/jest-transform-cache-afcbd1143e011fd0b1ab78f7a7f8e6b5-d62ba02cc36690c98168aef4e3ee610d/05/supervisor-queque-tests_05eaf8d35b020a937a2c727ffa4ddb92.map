{"file":"/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx","mappings":";;;;;AAAA,mCAA4C;AAC5C,kDAA0B;AAC1B,wEAA8C;AAK9C,wCAAwC;AACxC,qFAA6D;AAC7D,sFAA8C;AAE9C,kBAAS,CAAC,EAAE,OAAO,EAAE,IAAI,iCAAO,EAAE,EAAE,CAAC,CAAC;AAEtC,4EAA4E;AAC5E,MAAM,SAAS,GAAG,0BAAc,EAAE,CAAC;AAEnC,oDAAoD;AACpD,sCAAsC;AACtC,4DAA4D;AAC5D,oDAAoD;AACpD,UAAU;AACV,gDAAgD;AAChD,QAAQ;AACR,MAAM;AACN,qGAAqG;AACrG,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,MAAM,UAAU,GAAG;QACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;QACrB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;QACvB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;QACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;KACrB,CAAC;IAEF,2BAA2B;IAC3B,qBAAqB;IACrB,yDAAyD;IACzD,qCAAqC;IACrC,uBAAuB;IACvB,6BAA6B;IAC7B,kDAAkD;IAClD,sBAAsB;IACtB,gCAAgC;IAChC,6BAA6B;IAC7B,sBAAsB;IACtB,UAAU;IACV,6BAA6B;IAC7B,OAAO;IACP,MAAM;IAEN,kCAAkC;IAClC,yCAAyC;IACzC,+CAA+C;IAC/C,MAAM;IACN,IAAI,OAAY,EAAE,KAAK,CAAC;IAExB,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,YAAY,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QACpD,KAAK,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;QAChC,yDAAyD;QACzD,OAAO,GAAG,gBAAO,CAAC,8BAAC,+BAAqB,IAAC,UAAU,EAAE,UAAU,GAAI,EAAE;YACnE,OAAO,EAAE,EAAE,KAAK,EAAE;SACnB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,wCAAwC;IACxC,uCAAuC;IACvC,MAAM;IACN,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx"],"sourcesContent":["import { shallow, configure } from 'enzyme';\nimport React from 'react';\nimport configureStore from 'redux-mock-store';\nimport toJson from 'enzyme-to-json';\nimport {} from 'ts-jest';\nimport renderer from 'react-test-renderer';\nimport Props from '../SupervisorQueueScreen';\n// imported as an unconnected component!\nimport SupervisorQueueScreen from '../SupervisorQueueScreen';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n\n// const middlewares = []; // you can mock any middlewares here if necessary\nconst mockStore = configureStore();\n\n// describe('Testing SupervisorQueueScreen', () => {\n//   it('renders as expected', () => {\n//     const wrapper = shallow(<SupervisorQueueScreen  />, {\n//       context: { store: mockStore(initialState) }\n//     });\n//     expect(wrapper.dive()).toMatchSnapshot();\n//   });\n// });\n//jest.mock('react-navigation', ({withNavigation: (component: SupervisorQueueScreen) => component}));\ndescribe('SupervisorQueueScreen', () => {\n  const navigation = {\n    navigate: jest.fn(),\n    dispatch: jest.fn(),\n    state: {},\n    goBack: jest.fn(),\n    dismiss: jest.fn(),\n    openDrawer: jest.fn(),\n    closeDrawer: jest.fn(),\n    toggleDrawer: jest.fn(),\n    getParam: jest.fn(),\n    setParams: jest.fn(),\n    addListener: jest.fn(),\n    push: jest.fn(),\n    replace: jest.fn(),\n    pop: jest.fn(),\n    popToTop: jest.fn(),\n    isFocused: jest.fn()\n  };\n\n  // let wrapper: any, store;\n  // beforeEach(() => {\n  //   const initialState = { teamMembers: [], error: '' };\n  //   store = mockStore(initialState);\n  //   wrapper = shallow(\n  //     <SupervisorQueueScreen\n  //       // teamMembers={initialState.teamMembers}\n  //       // error={''}\n  //       navigation={navigation}\n  //       // store={mockStore}\n  //       // {...props}\n  //     />,\n  //     { context: { store } }\n  //   );\n  // });\n\n  // it('renders correctly', () => {\n  //   // const component = wrapper.dive();\n  //   expect(toJson(wrapper)).toMatchSnapshot();\n  // });\n  let wrapper: any, store;\n\n  beforeEach(() => {\n    const initialState = { teamMembers: [], error: '' };\n    store = mockStore(initialState);\n    // Shallow render the container passing in the mock store\n    wrapper = shallow(<SupervisorQueueScreen navigation={navigation} />, {\n      context: { store }\n    });\n  });\n  // it('should render correctly', () => {\n  //   expect(wrapper).toMatchSnapshot();\n  // });\n  it('renders correctly', () => {\n    const component = wrapper.dive();\n    expect(component).toMatchSnapshot();\n  });\n});\n"],"version":3}