0f7f5e2e5041645a46cd8de96505f19e
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.SELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.selectTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.UNSELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.unSelectTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual({
      teamMembers: [],
      error: ''
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWctZHJvcC10ZXN0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQSxDLENBRUE7OztBQUVBLFFBQVEsQ0FBQyxtQkFBRCxFQUFzQixNQUFLO0FBQ2pDLEVBQUEsRUFBRSxDQUFDLG9EQUFELEVBQXVELE1BQUs7QUFDNUQsVUFBTSxRQUFRLEdBQUcsVUFBakI7QUFDQSxVQUFNLGNBQWMsR0FBRztBQUNyQixNQUFBLElBQUksRUFBRSxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQURHO0FBRXJCLE1BQUEsT0FBTyxFQUFFO0FBQUUsUUFBQTtBQUFGO0FBRlksS0FBdkI7QUFJQSxJQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsUUFBekIsQ0FBRCxDQUFOLENBQTJDLE9BQTNDLENBQW1ELGNBQW5ELEVBTjRELENBTzVEO0FBQ0QsR0FSQyxDQUFGO0FBU0EsRUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsTUFBSztBQUM1RCxVQUFNLFFBQVEsR0FBRyxVQUFqQjtBQUNBLFVBQU0sY0FBYyxHQUFHO0FBQ3JCLE1BQUEsSUFBSSxFQUFFLE9BQUEsQ0FBQSxXQUFBLENBQVksb0JBREc7QUFFckIsTUFBQSxPQUFPLEVBQUU7QUFBRSxRQUFBO0FBQUY7QUFGWSxLQUF2QjtBQUlBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBUixDQUEyQixRQUEzQixDQUFELENBQU4sQ0FBNkMsT0FBN0MsQ0FBcUQsY0FBckQ7QUFDRCxHQVBDLENBQUY7QUFRRCxDQWxCTyxDQUFSO0FBb0JBLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixNQUFLO0FBQ2xDLEVBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQUs7QUFDekMsSUFBQSxNQUFNLENBQUMsVUFBQSxDQUFBLE9BQUEsQ0FBUSxTQUFSLEVBQW1CLEVBQW5CLENBQUQsQ0FBTixDQUErQixPQUEvQixDQUF1QztBQUNyQyxNQUFBLFdBQVcsRUFBRSxFQUR3QjtBQUVyQyxNQUFBLEtBQUssRUFBRTtBQUY4QixLQUF2QztBQUlELEdBTEMsQ0FBRjtBQU1ELENBUE8sQ0FBUixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZSwgcmVkdWNlciB9IGZyb20gJy4uL2RyYWctYW5kLWRyb3AvcmVkdWNlcnMnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL2FjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL3R5cGVzJztcblxuLy8gaW1wb3J0IHsgdGVhbU1lbWJlcnMsIG1lbWJlcklkIH0gZnJvbSAnLi4vLi4vY29uZmlnL2plc3QvbW9ja0RhdGEnO1xuXG5kZXNjcmliZSgnZHJhZy1kcm9wIGFjdGlvbnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFjdGlvbiB0byBzZWxlY3QgYSB0ZWFtIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBjb25zdCBtZW1iZXJJZCA9ICcxODAwMDAwMyc7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5TRUxFQ1RfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnNlbGVjdFRlYW1NZW1iZXIobWVtYmVySWQpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9uKTtcbiAgICAvLyBleHBlY3QocmVkdWNlcihpbml0aWFsU3RhdGUsIHNlbGVjdFRlYW1NZW1iZXIobWVtYmVySWQpKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBhY3Rpb24gdG8gcmVtb3ZlIGEgdGVhbSBtZW1iZXIgaWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbWVtYmVySWQgPSAnMTgwMDAwMDMnO1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0ge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuVU5TRUxFQ1RfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnVuU2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZHJhZy1kcm9wIHJlZHVjZXJzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QocmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9FcXVhbCh7XG4gICAgICB0ZWFtTWVtYmVyczogW10sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=