45ae5b058a2043869ccc745d4547a690
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("./types");

exports.initialState = {
  teamMembers: [],
  error: ''
};

exports.reducer = (state = exports.initialState, action) => {
  const {
    teamMembers
  } = state;
  const ADD = types_1.ActionTypes.ADD_TEAM_MEMBER;
  const REMOVE = types_1.ActionTypes.REMOVE_TEAM_MEMBER;

  switch (action.type) {
    case ADD || REMOVE:
      const memberId = action.payload.memberId; // check if member is already in the team

      const memberIdPresent = teamMembers.some(member => member.id === memberId);
      console.log('outside!!', teamMembers, memberId, action.type); // add member if not already there

      if (!memberIdPresent && ADD) {
        console.log('addddd');
        return Object.assign({}, state, {
          teamMembers: [...state.teamMembers, {
            id: action.payload.memberId
          }]
        }); // remove member if already there
      } else if (memberIdPresent && REMOVE) {
        console.log('removveee');
        return Object.assign({}, state, {
          teamMembers: teamMembers.filter(member => member.id !== memberId)
        });
      } else {
        return Object.assign({}, state, {
          error: 'oops'
        });
      }

    default:
      return state;
  }
}; //# sourceMappingURL=reducers.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBR2EsT0FBQSxDQUFBLFlBQUEsR0FBaUM7QUFDNUMsRUFBQSxXQUFXLEVBQUUsRUFEK0I7QUFFNUMsRUFBQSxLQUFLLEVBQUU7QUFGcUMsQ0FBakM7O0FBS0EsT0FBQSxDQUFBLE9BQUEsR0FBVSxDQUNyQixLQUFBLEdBQTBCLE9BQUEsQ0FBQSxZQURMLEVBRXJCLE1BRnFCLEtBR25CO0FBQ0YsUUFBTTtBQUFFLElBQUE7QUFBRixNQUFrQixLQUF4QjtBQUNBLFFBQU0sR0FBRyxHQUFHLE9BQUEsQ0FBQSxXQUFBLENBQVksZUFBeEI7QUFDQSxRQUFNLE1BQU0sR0FBRyxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQUEzQjs7QUFDQSxVQUFRLE1BQU0sQ0FBQyxJQUFmO0FBQ0UsU0FBSyxHQUFHLElBQUksTUFBWjtBQUNFLFlBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFQLENBQWUsUUFBaEMsQ0FERixDQUVFOztBQUNBLFlBQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxJQUFaLENBQ3RCLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBUCxLQUFjLFFBREYsQ0FBeEI7QUFHQSxNQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksV0FBWixFQUF5QixXQUF6QixFQUFzQyxRQUF0QyxFQUFnRCxNQUFNLENBQUMsSUFBdkQsRUFORixDQVFFOztBQUNBLFVBQUksQ0FBQyxlQUFELElBQW9CLEdBQXhCLEVBQTZCO0FBQzNCLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxRQUFaO0FBRUEsZUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFDSyxLQURMLEVBQ1U7QUFDUixVQUFBLFdBQVcsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVYsRUFBdUI7QUFBRSxZQUFBLEVBQUUsRUFBRSxNQUFNLENBQUMsT0FBUCxDQUFlO0FBQXJCLFdBQXZCO0FBREwsU0FEVixDQUFBLENBSDJCLENBTzNCO0FBQ0QsT0FSRCxNQVFPLElBQUksZUFBZSxJQUFJLE1BQXZCLEVBQStCO0FBQ3BDLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaO0FBRUEsZUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFDSyxLQURMLEVBQ1U7QUFDUixVQUFBLFdBQVcsRUFBRSxXQUFXLENBQUMsTUFBWixDQUFtQixNQUFNLElBQUksTUFBTSxDQUFDLEVBQVAsS0FBYyxRQUEzQztBQURMLFNBRFYsQ0FBQTtBQUlELE9BUE0sTUFPQTtBQUNMLGVBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQVksS0FBWixFQUFpQjtBQUFFLFVBQUEsS0FBSyxFQUFFO0FBQVQsU0FBakIsQ0FBQTtBQUNEOztBQUNIO0FBQ0UsYUFBTyxLQUFQO0FBN0JKO0FBK0JELENBdENZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IElTdXBlclF1ZXVlUHJvcHMgfSBmcm9tICcuLi8uLi9SZWFjdC9zY3JlZW5zL1N1cGVydmlzb3JRdWV1ZVNjcmVlbic7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IElTdXBlclF1ZXVlUHJvcHMgPSB7XG4gIHRlYW1NZW1iZXJzOiBbXSxcbiAgZXJyb3I6ICcnXG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChcbiAgc3RhdGU6IElTdXBlclF1ZXVlUHJvcHMgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uXG4pID0+IHtcbiAgY29uc3QgeyB0ZWFtTWVtYmVycyB9ID0gc3RhdGU7XG4gIGNvbnN0IEFERCA9IEFjdGlvblR5cGVzLkFERF9URUFNX01FTUJFUjtcbiAgY29uc3QgUkVNT1ZFID0gQWN0aW9uVHlwZXMuUkVNT1ZFX1RFQU1fTUVNQkVSO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBREQgfHwgUkVNT1ZFOlxuICAgICAgY29uc3QgbWVtYmVySWQgPSBhY3Rpb24ucGF5bG9hZC5tZW1iZXJJZDtcbiAgICAgIC8vIGNoZWNrIGlmIG1lbWJlciBpcyBhbHJlYWR5IGluIHRoZSB0ZWFtXG4gICAgICBjb25zdCBtZW1iZXJJZFByZXNlbnQgPSB0ZWFtTWVtYmVycy5zb21lKFxuICAgICAgICBtZW1iZXIgPT4gbWVtYmVyLmlkID09PSBtZW1iZXJJZFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKCdvdXRzaWRlISEnLCB0ZWFtTWVtYmVycywgbWVtYmVySWQsIGFjdGlvbi50eXBlKTtcblxuICAgICAgLy8gYWRkIG1lbWJlciBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgaWYgKCFtZW1iZXJJZFByZXNlbnQgJiYgQUREKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZGRkZGQnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiBbLi4uc3RhdGUudGVhbU1lbWJlcnMsIHsgaWQ6IGFjdGlvbi5wYXlsb2FkLm1lbWJlcklkIH1dXG4gICAgICAgIH07XG4gICAgICAgIC8vIHJlbW92ZSBtZW1iZXIgaWYgYWxyZWFkeSB0aGVyZVxuICAgICAgfSBlbHNlIGlmIChtZW1iZXJJZFByZXNlbnQgJiYgUkVNT1ZFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdnZlZWUnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci5pZCAhPT0gbWVtYmVySWQpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6ICdvb3BzJyB9O1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9