1d3404f82ff5e3493e848e673e3064e9
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const react_1 = __importDefault(require("react"));

const react_native_1 = require("react-native");

const prop_types_1 = __importDefault(require("prop-types"));

class DropZone extends react_1.default.Component {
  constructor(props) {
    super(props);
    this.displayName = 'DropZone';
    this.state = {};
    this.reportMeasurements = this.reportMeasurements.bind(this);
    this.onEnter = this.onEnter.bind(this);
    this.onLeave = this.onLeave.bind(this);
    this.onDrop = this.onDrop.bind(this);
  }

  reportMeasurements() {
    if (this.props.dragging) this.context.dragContext.removeZone(this.refs.wrapper);
    this.refs.wrapper.measure((_, __, width, height, x, y) => {
      if (!this.props.dragging) this.context.dragContext.updateZone({
        width,
        height,
        x,
        y,
        ref: this.refs.wrapper,
        onEnter: this.onEnter,
        onLeave: this.onLeave,
        onDrop: this.onDrop
      });
    });
  }

  componentDidMount() {
    this.reportMeasurements();
    this._timer = setInterval(this.reportMeasurements, 1000);
  }

  componentWillUnmount() {
    this.context.dragContext.removeZone(this.refs.wrapper);
    clearInterval(this._timer);
  }

  componentDidUpdate() {
    this.reportMeasurements();
  }

  onEnter({
    x,
    y
  }) {
    if (this.props.disabled) return;

    if (!this.state.active) {
      if (this.props.onEnter) this.props.onEnter();
      this.setState({
        active: true
      });
    }
  }

  onLeave() {
    if (this.props.disabled) return;

    if (this.state.active) {
      if (this.props.onLeave) this.props.onLeave();
      this.setState({
        active: false
      });
    }
  }

  onDrop(data) {
    if (this.props.disabled) return;
    if (this.props.onDrop) this.props.onDrop(data);
    this.setState({
      active: false
    });
  }

  render() {
    return react_1.default.createElement(react_native_1.View, {
      style: this.props.style,
      pointerEvents: this.props.pointerEvents,
      onLayout: this.reportMeasurements,
      ref: "wrapper"
    }, react_1.default.Children.map(this.props.children, child => {
      return react_1.default.cloneElement(child, Object.assign({}, this.props, {
        dragOver: this.state.active
      }));
    }));
  }

}

DropZone.propTypes = {
  onEnter: prop_types_1.default.func,
  onLeave: prop_types_1.default.func,
  onDrop: prop_types_1.default.func
};
DropZone.contextTypes = {
  dragContext: prop_types_1.default.any
};
exports.default = DropZone; //# sourceMappingURL=DropZone.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxDQUFVLElBRkY7QUFHakIsRUFBQSxNQUFNLEVBQUUsWUFBQSxDQUFBLE9BQUEsQ0FBVTtBQUhELENBQVo7QUErQ0EsUUFBQSxDQUFBLFlBQUEsR0FBZTtBQUNwQixFQUFBLFdBQVcsRUFBRSxZQUFBLENBQUEsT0FBQSxDQUFVO0FBREgsQ0FBZjtBQXVCVCxPQUFBLENBQUEsT0FBQSxHQUFlLFFBQWYsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBWaWV3LCBUb3VjaGFibGVPcGFjaXR5IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIERyb3Bab25lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9ICdEcm9wWm9uZSc7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMucmVwb3J0TWVhc3VyZW1lbnRzID0gdGhpcy5yZXBvcnRNZWFzdXJlbWVudHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRW50ZXIgPSB0aGlzLm9uRW50ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTGVhdmUgPSB0aGlzLm9uTGVhdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRHJvcCA9IHRoaXMub25Ecm9wLmJpbmQodGhpcyk7XG4gIH1cblxuICByZXBvcnRNZWFzdXJlbWVudHMoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZHJhZ2dpbmcpXG4gICAgICB0aGlzLmNvbnRleHQuZHJhZ0NvbnRleHQucmVtb3ZlWm9uZSh0aGlzLnJlZnMud3JhcHBlcik7XG4gICAgdGhpcy5yZWZzLndyYXBwZXIubWVhc3VyZSgoXywgX18sIHdpZHRoLCBoZWlnaHQsIHgsIHkpID0+IHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5kcmFnZ2luZylcbiAgICAgICAgdGhpcy5jb250ZXh0LmRyYWdDb250ZXh0LnVwZGF0ZVpvbmUoe1xuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICB4LFxuICAgICAgICAgIHksXG4gICAgICAgICAgcmVmOiB0aGlzLnJlZnMud3JhcHBlcixcbiAgICAgICAgICBvbkVudGVyOiB0aGlzLm9uRW50ZXIsXG4gICAgICAgICAgb25MZWF2ZTogdGhpcy5vbkxlYXZlLFxuICAgICAgICAgIG9uRHJvcDogdGhpcy5vbkRyb3BcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uRHJvcDogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnJlcG9ydE1lYXN1cmVtZW50cygpO1xuICAgIHRoaXMuX3RpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5yZXBvcnRNZWFzdXJlbWVudHMsIDEwMDApO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jb250ZXh0LmRyYWdDb250ZXh0LnJlbW92ZVpvbmUodGhpcy5yZWZzLndyYXBwZXIpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpO1xuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnJlcG9ydE1lYXN1cmVtZW50cygpO1xuICB9XG5cbiAgb25FbnRlcih7IHgsIHkgfSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25FbnRlcikgdGhpcy5wcm9wcy5vbkVudGVyKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbkxlYXZlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgaWYgKHRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkxlYXZlKSB0aGlzLnByb3BzLm9uTGVhdmUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbkRyb3AoZGF0YSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm47XG4gICAgaWYgKHRoaXMucHJvcHMub25Ecm9wKSB0aGlzLnByb3BzLm9uRHJvcChkYXRhKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgZHJhZ0NvbnRleHQ6IFByb3BUeXBlcy5hbnlcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLnN0eWxlfVxuICAgICAgICBwb2ludGVyRXZlbnRzPXt0aGlzLnByb3BzLnBvaW50ZXJFdmVudHN9XG4gICAgICAgIG9uTGF5b3V0PXt0aGlzLnJlcG9ydE1lYXN1cmVtZW50c31cbiAgICAgICAgcmVmPVwid3JhcHBlclwiXG4gICAgICA+XG4gICAgICAgIHtSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgZHJhZ092ZXI6IHRoaXMuc3RhdGUuYWN0aXZlIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEcm9wWm9uZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=