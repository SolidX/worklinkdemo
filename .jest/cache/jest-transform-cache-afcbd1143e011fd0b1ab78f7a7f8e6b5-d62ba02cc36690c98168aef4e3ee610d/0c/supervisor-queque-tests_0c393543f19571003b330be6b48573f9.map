{"version":3,"sources":["supervisor-queque-tests.tsx"],"names":[],"mappings":";;;;;;;;;;IAAA;;AACA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,MAAA,qBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA,C,CAEA;;;AACA,MAAA,uBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AAEA,MAAM,WAAW,GAAG,EAApB,C,CAAwB;AACxB;;AAEA,MAAM,YAAY,GAAG;AACnB,EAAA,WAAW,EAAE,EADM;AAEnB,EAAA,KAAK,EAAE;AAFY,CAArB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAQ,CAAC,iCAAD,EAAoC,MAAK;AAC/C;AACA;AACA;AACA;AACA,EAAA,EAAE,CAAC,mBAAD,EAAsB,MAAK;AAC3B,UAAM,IAAI,GAAG,qBAAA,CAAA,OAAA,CAAS,MAAT,CAAgB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,uBAAA,CAAA,OAAD,EAAsB,IAAtB,CAAhB,EAA2C,MAA3C,EAAb;AACA,IAAA,MAAM,CAAC,IAAD,CAAN,CAAa,eAAb;AACD,GAHC,CAAF;AAID,CATO,CAAR,C","sourcesContent":["// import { shallow } from 'enzyme';\nimport React from 'react';\n// import configureStore from 'redux-mock-store';\nimport {} from 'ts-jest';\nimport renderer from 'react-test-renderer';\n\n// imported as a connected component!\nimport SupervisorQueueScreen from '../SupervisorQueueScreen';\n\nconst middlewares = []; // you can mock any middlewares here if necessary\n// const mockStore = configureStore(middlewares);\n\nconst initialState = {\n  teamMembers: [],\n  error: ''\n};\n\n// describe('Testing SupervisorQueueScreen', () => {\n//   it('renders as expected', () => {\n//     const wrapper = shallow(\n//       <SupervisorQueueScreen />\n//       // { context: { store: mockStore(initialState) } },\n//     );\n//     expect(wrapper.dive()).toMatchSnapshot();\n//   });\n// });\n// jest.mock('react-native', () => require('react-native-mock'), {\n//   virtual: true\n// });\ndescribe('SupervisorQueueScreen rendering', () => {\n  //   const container = shallow(<SupervisorQueueScreen />);\n  //   it('should render a <DragContainer/>', () => {\n  //     expect(container.find('DragContainer')).toHaveLength(1);\n  //   });\n  it('renders correctly', () => {\n    const tree = renderer.create(<SupervisorQueueScreen />).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n"],"sourceRoot":""}