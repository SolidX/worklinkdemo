{"version":3,"sources":["SupervisorQueueScreen.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;AACA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AACA,MAAA,aAAA,GAAA,eAAA,CAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,qDAAA,CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8CAAA,CAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iDAAA,CAAA,CAAA;;AACA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,wCAAA,CAAA,CAAA;;AAEA,MAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,+CAAA,CAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAIA,MAAA,SAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAgBA,MAAA,qBAAA,SAAoC,OAAA,CAAA,SAApC,CAAoD;AAApD,EAAA,WAAA,GAAA;;AACE,SAAA,KAAA,GAAQ;AACN,MAAA,SAAS,EAAE,IADL;AAEN,MAAA,aAAa,EAAE;AAFT,KAAR;;AAKA,SAAA,YAAA,GAAgB,EAAD,IAAe;AAC5B,MAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ,EAAgC,EAAhC;AACA,WAAK,QAAL,CAAc;AAAE,QAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAHD;;AAIA,SAAA,QAAA,GAAW,MAAK;AACd,WAAK,QAAL,CAAc;AAAE,QAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAFD;;AAWA,SAAA,eAAA,GAAkB,MAAK;AACrB,WAAK,QAAL,CAAc;AAAE,QAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KAFD;AA8DD,GAnFmD,CAclD;AACA;AACA;;;AACA,EAAA,iBAAiB,GAAA;AACf,UAAM,SAAS,GAAG,KAAK,KAAL,CAAW,WAA7B;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,SAAzB;AACD;;AAID,EAAA,MAAM,GAAA;AACJ,UAAM;AAAE,MAAA,WAAF;AAAe,MAAA,mBAAf;AAAoC,MAAA;AAApC,QAAmD,KAAK,KAA9D;AACA,UAAM;AAAE,MAAA;AAAF,QAAgB,KAAK,KAA3B;AACA,WACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,eAAA,CAAA,OAAD,EAAc;AACZ,MAAA,SAAS,EAAE,WADC;AAEZ,MAAA,gBAAgB,EAAE,mBAFN;AAGZ,MAAA,eAAe,EAAE,KAAK,eAHV;AAIZ,MAAA,WAAW,EAAE,MAAK;AAChB;AACA,aAAK,QAAL,CAAc;AAAE,UAAA,aAAa,EAAE;AAAjB,SAAd;AACD,OAPW;AAQZ,MAAA,SAAS,EAAE,MAAK;AACd,aAAK,QAAL,CAAc,EAAd,EAAkB,MAAK;AACrB;AACA,cAAI,KAAK,KAAL,CAAW,aAAX,IAA4B,KAAhC,EAAuC;AACrC,YAAA,mBAAmB,CAAC,SAAD,CAAnB;AACA,iBAAK,QAAL;AACD,WAHD,MAGO;AACL,iBAAK,QAAL;AACD;AACF,SARD;AASD;AAlBW,KAAd,EAoBE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAA,OAAD,EAAa,IAAb,EAIE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAA,OAAD,EAAU,IAAV,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,OAAD,EAAW,IAAX,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,sBAAA,CAAA,OAAD,EAAgB,IAAhB,EAAgB,eAAhB,CADF,CADF,EAIE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,UAAA,CAAA,OAAD,EAAS,IAAT,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,oBAAA,CAAA,OAAD,EAAmB;AACjB,MAAA,UAAU,EAAE,UADK;AAEjB,MAAA,aAAa,EAAE,KAAK;AAFH,KAAnB,CADF,CAJF,CAJF,EAkBE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,OAAD,EAAW,IAAX,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,aAAA,CAAA,OAAD,EAAY,IAAZ,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAA,OAAD,EAAa,IAAb,EAAa,WAAb,CADF,CADF,EAIE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,WAAA,CAAA,OAAD,EAAU,IAAV,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,UAAA,CAAA,OAAD,EAAS;AACP,MAAA,gBAAgB,EAAE,KAAK,KAAL,CAAW,mBADtB;AAEP,MAAA,SAAS,EAAE,KAAK,KAAL,CAAW,WAFf;AAGP,MAAA,YAAY,EAAE,KAAK,YAHZ;AAIP,MAAA,SAAS,EAAE,KAAK,KAAL,CAAW;AAJf,KAAT,CADF,CAJF,CAlBF,CApBF,CADF;AAuDD;;AAlFiD;;AAqFpD,MAAM,eAAe,GAAI,KAAD,IAAmB,KAAK,CAAC,QAAjD;;AACA,MAAM,kBAAkB,GAAI,QAAD,KAAmD;AAC5E,EAAA,mBAAmB,EAAG,QAAD,IACnB,QAAQ,CAAC,SAAA,CAAA,gBAAA,CAAiB,QAAjB,CAAD;AAFkE,CAAnD,CAA3B;;AAIA,OAAA,CAAA,OAAA,GAAe,aAAA,CAAA,OAAA,CACb,eADa,EAEb,kBAFa,EAGb,qBAHa,CAAf,C","sourcesContent":["import React, { Component } from 'react';\nimport AppContainer from '../common/AppBody/AppContainer';\nimport LeftPanel from '../common/AppBody/LeftPanel';\nimport LeftHeader from '../common/AppBody/LeftHeader';\nimport LeftBody from '../common/AppBody/LeftBody';\nimport RightPanel from '../common/AppBody/RightPanel';\nimport RightHeader from '../common/AppBody/RightHeader';\nimport RightBody from '../common/AppBody/RightBody';\nimport WorkOrderHeader from '../components/LeftPanel/Header/SuperWorkOrderHeader';\nimport ActionHeader from '../components/RightPanel/Header/ActionHeader';\nimport SuperWorkOrderList from '../components/LeftPanel/Body/SuperWorkOrderList';\nimport TeamList from '../components/RightPanel/Body/TeamList';\nimport { NavigationScreenProp } from 'react-navigation';\nimport DragContainer from '../utils/react-native-drag-drop/DragContainer';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { allReducers, IState } from '../../../src/Redux';\nimport { ITeamMember } from '../../../src/Redux/drag-and-drop/types';\nimport { toggleTeamMember } from '../../Redux/drag-and-drop/actions';\n\nexport interface ISuperQueueNavProps {\n  navigation: NavigationScreenProp<any, any>;\n}\n\nexport interface ISuperQueueProps {\n  teamMembers: ITeamMember[];\n  error: string;\n}\nexport interface ISuperQueueDispatchProps {\n  onTeamMemberClicked(memberId: string): void;\n}\n\ntype Props = ISuperQueueProps & ISuperQueueNavProps & ISuperQueueDispatchProps;\n\nclass SupervisorQueueScreen extends Component<Props> {\n  state = {\n    currentId: null,\n    droppedInZone: null\n  };\n\n  addCurrentId = (id: string) => {\n    console.log('added current Id', id);\n    this.setState({ currentId: id });\n  };\n  removeId = () => {\n    this.setState({ currentId: '' });\n  };\n\n  // toggleScroll = (visible: boolean) => {\n  //   this.setState({ scrollEnabled: visible });\n  // };\n  componentDidMount() {\n    const teamArray = this.props.teamMembers;\n    console.log('teamArray', teamArray);\n  }\n  isDroppedInZone = () => {\n    this.setState({ droppedInZone: true });\n  };\n  render() {\n    const { teamMembers, onTeamMemberClicked, navigation } = this.props;\n    const { currentId } = this.state;\n    return (\n      <DragContainer\n        teamArray={teamMembers}\n        selectTeamMember={onTeamMemberClicked}\n        isDroppedInZone={this.isDroppedInZone}\n        onDragStart={() => {\n          // if only one teamMember is dragged then add them to teamArray\n          this.setState({ droppedInZone: false });\n        }}\n        onDragEnd={() => {\n          this.setState({}, () => {\n            // was teamMember dropped on workOrder?, if not remove from teamArray\n            if (this.state.droppedInZone == false) {\n              onTeamMemberClicked(currentId);\n              this.removeId();\n            } else {\n              this.removeId();\n            }\n          });\n        }}\n      >\n        <AppContainer>\n          {/* ========\n             LEFT\n        ======== */}\n          <LeftPanel>\n            <LeftHeader>\n              <WorkOrderHeader>My HVAC Queue</WorkOrderHeader>\n            </LeftHeader>\n            <LeftBody>\n              <SuperWorkOrderList\n                navigation={navigation}\n                droppedInZone={this.isDroppedInZone}\n              />\n            </LeftBody>\n          </LeftPanel>\n          {/* ========\n             RIGHT\n        ======== */}\n          <RightPanel>\n            <RightHeader>\n              <ActionHeader>HVAC Team</ActionHeader>\n            </RightHeader>\n            <RightBody>\n              <TeamList\n                selectTeamMember={this.props.onTeamMemberClicked}\n                teamArray={this.props.teamMembers}\n                addCurrentId={this.addCurrentId}\n                currentId={this.state.currentId}\n              />\n            </RightBody>\n          </RightPanel>\n        </AppContainer>\n      </DragContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IState) => state.dragDrop;\nconst mapDispatchToProps = (dispatch: Dispatch): ISuperQueueDispatchProps => ({\n  onTeamMemberClicked: (memberId: string) =>\n    dispatch(toggleTeamMember(memberId))\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SupervisorQueueScreen);\n"],"sourceRoot":""}