699cb16eb84062a0d00a206c0d98567a
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.addTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.REMOVE_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.removeTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual({
      teamMembers: [],
      error: ''
    });
  });
  it('should handle ADD_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [],
      error: ''
    }, {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
  it('should handle REMOVE_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [{
        id: '1800004'
      }, {
        id: '1800008'
      }],
      error: ''
    }, {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId: '1800008'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxDQUFDO0FBQUUsUUFBQSxFQUFFLEVBQUU7QUFBTixPQUFELENBREw7QUFFUixNQUFBLEtBQUssRUFBRTtBQUZDLEtBYlY7QUFpQkQsR0FsQkMsQ0FBRjtBQW1CRCxDQTlDTyxDQUFSLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlLCByZWR1Y2VyIH0gZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC9yZWR1Y2Vycyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uL2RyYWctYW5kLWRyb3AvYWN0aW9ucyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4uL2RyYWctYW5kLWRyb3AvdHlwZXMnO1xuXG4vLyBpbXBvcnQgeyB0ZWFtTWVtYmVycywgbWVtYmVySWQgfSBmcm9tICcuLi8uLi9jb25maWcvamVzdC9tb2NrRGF0YSc7XG5cbmRlc2NyaWJlKCdkcmFnLWRyb3AgYWN0aW9ucycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gYWN0aW9uIHRvIHNlbGVjdCBhIHRlYW0gbWVtYmVyIGlkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1lbWJlcklkID0gJzE4MDAwMDAzJztcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFERF9URUFNX01FTUJFUixcbiAgICAgIHBheWxvYWQ6IHsgbWVtYmVySWQgfVxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMuYWRkVGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICAgIC8vIGV4cGVjdChyZWR1Y2VyKGluaXRpYWxTdGF0ZSwgc2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFjdGlvbiB0byByZW1vdmUgYSB0ZWFtIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBjb25zdCBtZW1iZXJJZCA9ICcxODAwMDAwMyc7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRU1PVkVfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnJlbW92ZVRlYW1NZW1iZXIobWVtYmVySWQpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9uKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2RyYWctZHJvcCByZWR1Y2VycycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHJlZHVjZXIodW5kZWZpbmVkLCB7fSkpLnRvRXF1YWwoe1xuICAgICAgdGVhbU1lbWJlcnM6IFtdLFxuICAgICAgZXJyb3I6ICcnXG4gICAgfSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGhhbmRsZSBBRERfVEVBTV9NRU1CRVInLCAoKSA9PiB7XG4gICAgZXhwZWN0KFxuICAgICAgcmVkdWNlcihcbiAgICAgICAge1xuICAgICAgICAgIHRlYW1NZW1iZXJzOiBbXSxcbiAgICAgICAgICBlcnJvcjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFERF9URUFNX01FTUJFUixcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBtZW1iZXJJZDogJzE4MDAwMDQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApXG4gICAgKS50b0VxdWFsKHtcbiAgICAgIHRlYW1NZW1iZXJzOiBbeyBpZDogJzE4MDAwMDQnIH1dLFxuICAgICAgZXJyb3I6ICcnXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIFJFTU9WRV9URUFNX01FTUJFUicsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKFxuICAgICAgICB7XG4gICAgICAgICAgdGVhbU1lbWJlcnM6IFt7IGlkOiAnMTgwMDAwNCcgfSwgeyBpZDogJzE4MDAwMDgnIH1dLFxuICAgICAgICAgIGVycm9yOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQUREX1RFQU1fTUVNQkVSLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lbWJlcklkOiAnMTgwMDAwOCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApLnRvRXF1YWwoe1xuICAgICAgdGVhbU1lbWJlcnM6IFt7IGlkOiAnMTgwMDAwNCcgfV0sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=