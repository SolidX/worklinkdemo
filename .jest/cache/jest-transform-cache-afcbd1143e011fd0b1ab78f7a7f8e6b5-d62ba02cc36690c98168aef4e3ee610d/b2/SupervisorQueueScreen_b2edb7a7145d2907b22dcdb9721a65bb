b3cb44b2a9badeca1a7965ffe27abe38
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const react_1 = __importStar(require("react"));

const AppContainer_1 = __importDefault(require("../common/AppBody/AppContainer"));

const LeftPanel_1 = __importDefault(require("../common/AppBody/LeftPanel"));

const LeftHeader_1 = __importDefault(require("../common/AppBody/LeftHeader"));

const LeftBody_1 = __importDefault(require("../common/AppBody/LeftBody"));

const RightPanel_1 = __importDefault(require("../common/AppBody/RightPanel"));

const RightHeader_1 = __importDefault(require("../common/AppBody/RightHeader"));

const RightBody_1 = __importDefault(require("../common/AppBody/RightBody"));

const SuperWorkOrderHeader_1 = __importDefault(require("../components/LeftPanel/Header/SuperWorkOrderHeader"));

const ActionHeader_1 = __importDefault(require("../components/RightPanel/Header/ActionHeader"));

const SuperWorkOrderList_1 = __importDefault(require("../components/LeftPanel/Body/SuperWorkOrderList"));

const TeamList_1 = __importDefault(require("../components/RightPanel/Body/TeamList"));

const DragContainer_1 = __importDefault(require("../utils/react-native-drag-drop/DragContainer"));

const react_redux_1 = require("react-redux");

const actions_1 = require("../../Redux/drag-and-drop/actions");

class SupervisorQueueScreen extends react_1.Component {
  constructor() {
    super(...arguments);
    this.state = {
      currentId: null,
      droppedInZone: null
    };

    this.addCurrentId = id => {
      console.log('added current Id', id);
      this.setState({
        currentId: id
      });
    };

    this.removeId = () => {
      this.setState({
        currentId: ''
      });
    };

    this.isDroppedInZone = () => {
      this.setState({
        droppedInZone: true
      });
    };
  } // toggleScroll = (visible: boolean) => {
  //   this.setState({ scrollEnabled: visible });
  // };


  componentDidMount() {
    const teamArray = this.props.teamMembers;
    console.log('teamArray', teamArray);
  }

  render() {
    const {
      teamMembers,
      onTeamMemberClicked,
      navigation
    } = this.props;
    const {
      currentId
    } = this.state;
    return react_1.default.createElement(DragContainer_1.default, {
      teamArray: teamMembers,
      selectTeamMember: onTeamMemberClicked,
      isDroppedInZone: this.isDroppedInZone,
      onDragStart: () => {
        // if only one teamMember is dragged then add them to teamArray
        this.setState({
          droppedInZone: false
        });
      },
      onDragEnd: () => {
        this.setState({}, () => {
          // was teamMember dropped on workOrder?, if not remove from teamArray
          if (this.state.droppedInZone == false) {
            onTeamMemberClicked(currentId);
            this.removeId();
          } else {
            this.removeId();
          }
        });
      }
    }, react_1.default.createElement(AppContainer_1.default, null, react_1.default.createElement(LeftPanel_1.default, null, react_1.default.createElement(LeftHeader_1.default, null, react_1.default.createElement(SuperWorkOrderHeader_1.default, null, "My HVAC Queue")), react_1.default.createElement(LeftBody_1.default, null, react_1.default.createElement(SuperWorkOrderList_1.default, {
      navigation: navigation,
      droppedInZone: this.isDroppedInZone
    }))), react_1.default.createElement(RightPanel_1.default, null, react_1.default.createElement(RightHeader_1.default, null, react_1.default.createElement(ActionHeader_1.default, null, "HVAC Team")), react_1.default.createElement(RightBody_1.default, null, react_1.default.createElement(TeamList_1.default, {
      selectTeamMember: this.props.onTeamMemberClicked,
      teamArray: this.props.teamMembers,
      addCurrentId: this.addCurrentId,
      currentId: this.state.currentId
    })))));
  }

}

const mapStateToProps = state => state.dragDrop;

const mapDispatchToProps = dispatch => ({
  onTeamMemberClicked: memberId => dispatch(actions_1.toggleTeamMember(memberId))
});

exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(SupervisorQueueScreen); //# sourceMappingURL=SupervisorQueueScreen.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,