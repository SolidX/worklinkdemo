025823905170b31468e9e55c81596cd3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("./types");

exports.initialState = {
  teamMembers: [],
  error: ''
};

exports.reducer = (state = exports.initialState, action) => {
  const {
    teamMembers
  } = state;
  const ADD = types_1.ActionTypes.ADD_TEAM_MEMBER;
  const REMOVE = types_1.ActionTypes.REMOVE_TEAM_MEMBER;

  switch (action.type) {
    case ADD:
      const memberId = action.payload.memberId; // check if member is already in the team

      const memberIdPresent = teamMembers.some(member => member.id === memberId);
      console.log('outside!!', teamMembers, memberId, action.type); // add member if not already there

      if (!memberIdPresent && ADD) {
        console.log('addddd');
        return Object.assign({}, state, {
          teamMembers: [...state.teamMembers, {
            id: action.payload.memberId
          }]
        }); // remove member if already there
      } else if (memberIdPresent && REMOVE) {
        console.log('removveee');
        return Object.assign({}, state, {
          teamMembers: teamMembers.filter(member => member.id !== memberId)
        });
      } else {
        return Object.assign({}, state, {
          error: 'oops'
        });
      }

    case REMOVE:
      return Object.assign({}, state, {
        teamMembers: teamMembers.filter(member => member.id !== memberId)
      });

    default:
      return state;
  }
}; //# sourceMappingURL=reducers.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBR2EsT0FBQSxDQUFBLFlBQUEsR0FBaUM7QUFDNUMsRUFBQSxXQUFXLEVBQUUsRUFEK0I7QUFFNUMsRUFBQSxLQUFLLEVBQUU7QUFGcUMsQ0FBakM7O0FBS0EsT0FBQSxDQUFBLE9BQUEsR0FBVSxDQUNyQixLQUFBLEdBQTBCLE9BQUEsQ0FBQSxZQURMLEVBRXJCLE1BRnFCLEtBR25CO0FBQ0YsUUFBTTtBQUFFLElBQUE7QUFBRixNQUFrQixLQUF4QjtBQUNBLFFBQU0sR0FBRyxHQUFHLE9BQUEsQ0FBQSxXQUFBLENBQVksZUFBeEI7QUFDQSxRQUFNLE1BQU0sR0FBRyxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQUEzQjs7QUFDQSxVQUFRLE1BQU0sQ0FBQyxJQUFmO0FBQ0UsU0FBSyxHQUFMO0FBQ0UsWUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxRQUFoQyxDQURGLENBRUU7O0FBQ0EsWUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLElBQVosQ0FDdEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFQLEtBQWMsUUFERixDQUF4QjtBQUdBLE1BQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCLFdBQXpCLEVBQXNDLFFBQXRDLEVBQWdELE1BQU0sQ0FBQyxJQUF2RCxFQU5GLENBUUU7O0FBQ0EsVUFBSSxDQUFDLGVBQUQsSUFBb0IsR0FBeEIsRUFBNkI7QUFDM0IsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsV0FBVixFQUF1QjtBQUFFLFlBQUEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFQLENBQWU7QUFBckIsV0FBdkI7QUFETCxTQURWLENBQUEsQ0FIMkIsQ0FPM0I7QUFDRCxPQVJELE1BUU8sSUFBSSxlQUFlLElBQUksTUFBdkIsRUFBK0I7QUFDcEMsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLFdBQVcsQ0FBQyxNQUFaLENBQW1CLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBUCxLQUFjLFFBQTNDO0FBREwsU0FEVixDQUFBO0FBSUQsT0FQTSxNQU9BO0FBQ0wsZUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxLQUFaLEVBQWlCO0FBQUUsVUFBQSxLQUFLLEVBQUU7QUFBVCxTQUFqQixDQUFBO0FBQ0Q7O0FBQ0gsU0FBSyxNQUFMO0FBQ0UsYUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFDSyxLQURMLEVBQ1U7QUFDUixRQUFBLFdBQVcsRUFBRSxXQUFXLENBQUMsTUFBWixDQUFtQixNQUFNLElBQUksTUFBTSxDQUFDLEVBQVAsS0FBYyxRQUEzQztBQURMLE9BRFYsQ0FBQTs7QUFJRjtBQUNFLGFBQU8sS0FBUDtBQWxDSjtBQW9DRCxDQTNDWSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBJU3VwZXJRdWV1ZVByb3BzIH0gZnJvbSAnLi4vLi4vUmVhY3Qvc2NyZWVucy9TdXBlcnZpc29yUXVldWVTY3JlZW4nO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBJU3VwZXJRdWV1ZVByb3BzID0ge1xuICB0ZWFtTWVtYmVyczogW10sXG4gIGVycm9yOiAnJ1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZHVjZXIgPSAoXG4gIHN0YXRlOiBJU3VwZXJRdWV1ZVByb3BzID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246IEFjdGlvblxuKSA9PiB7XG4gIGNvbnN0IHsgdGVhbU1lbWJlcnMgfSA9IHN0YXRlO1xuICBjb25zdCBBREQgPSBBY3Rpb25UeXBlcy5BRERfVEVBTV9NRU1CRVI7XG4gIGNvbnN0IFJFTU9WRSA9IEFjdGlvblR5cGVzLlJFTU9WRV9URUFNX01FTUJFUjtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgQUREOlxuICAgICAgY29uc3QgbWVtYmVySWQgPSBhY3Rpb24ucGF5bG9hZC5tZW1iZXJJZDtcbiAgICAgIC8vIGNoZWNrIGlmIG1lbWJlciBpcyBhbHJlYWR5IGluIHRoZSB0ZWFtXG4gICAgICBjb25zdCBtZW1iZXJJZFByZXNlbnQgPSB0ZWFtTWVtYmVycy5zb21lKFxuICAgICAgICBtZW1iZXIgPT4gbWVtYmVyLmlkID09PSBtZW1iZXJJZFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKCdvdXRzaWRlISEnLCB0ZWFtTWVtYmVycywgbWVtYmVySWQsIGFjdGlvbi50eXBlKTtcblxuICAgICAgLy8gYWRkIG1lbWJlciBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgaWYgKCFtZW1iZXJJZFByZXNlbnQgJiYgQUREKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhZGRkZGQnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiBbLi4uc3RhdGUudGVhbU1lbWJlcnMsIHsgaWQ6IGFjdGlvbi5wYXlsb2FkLm1lbWJlcklkIH1dXG4gICAgICAgIH07XG4gICAgICAgIC8vIHJlbW92ZSBtZW1iZXIgaWYgYWxyZWFkeSB0aGVyZVxuICAgICAgfSBlbHNlIGlmIChtZW1iZXJJZFByZXNlbnQgJiYgUkVNT1ZFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdnZlZWUnKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci5pZCAhPT0gbWVtYmVySWQpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6ICdvb3BzJyB9O1xuICAgICAgfVxuICAgIGNhc2UgUkVNT1ZFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci5pZCAhPT0gbWVtYmVySWQpXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9