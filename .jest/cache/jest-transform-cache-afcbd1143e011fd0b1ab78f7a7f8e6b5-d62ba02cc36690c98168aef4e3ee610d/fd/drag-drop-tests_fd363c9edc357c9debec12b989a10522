3e60e1ea8006940a730bc5c6546e4382
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.addTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.REMOVE_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.removeTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual({
      teamMembers: [],
      error: ''
    });
  });
  it('should handle ADD_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [],
      error: ''
    }, {
      type: types_1.ActionTypes.ADD_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [{
        id: '1800004'
      }],
      error: ''
    });
  });
  it('should handle REMOVE_TEAM_MEMBER', () => {
    expect(reducers_1.reducer({
      teamMembers: [{
        id: '1800004'
      }, {
        id: '1800008'
      }],
      error: ''
    }, {
      type: types_1.ActionTypes.REMOVE_TEAM_MEMBER,
      payload: {
        memberId: '1800004'
      }
    })).toEqual({
      teamMembers: [],
      error: ''
    });
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsRUFETDtBQUVSLE1BQUEsS0FBSyxFQUFFO0FBRkMsS0FiVjtBQWlCRCxHQWxCQyxDQUFGO0FBbUJELENBOUNPLENBQVIsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsU3RhdGUsIHJlZHVjZXIgfSBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL3JlZHVjZXJzJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC9hY3Rpb25zJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC90eXBlcyc7XG5cbi8vIGltcG9ydCB7IHRlYW1NZW1iZXJzLCBtZW1iZXJJZCB9IGZyb20gJy4uLy4uL2NvbmZpZy9qZXN0L21vY2tEYXRhJztcblxuZGVzY3JpYmUoJ2RyYWctZHJvcCBhY3Rpb25zJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBhY3Rpb24gdG8gc2VsZWN0IGEgdGVhbSBtZW1iZXIgaWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbWVtYmVySWQgPSAnMTgwMDAwMDMnO1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0ge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQUREX1RFQU1fTUVNQkVSLFxuICAgICAgcGF5bG9hZDogeyBtZW1iZXJJZCB9XG4gICAgfTtcbiAgICBleHBlY3QoYWN0aW9ucy5hZGRUZWFtTWVtYmVyKG1lbWJlcklkKSkudG9FcXVhbChleHBlY3RlZEFjdGlvbik7XG4gICAgLy8gZXhwZWN0KHJlZHVjZXIoaW5pdGlhbFN0YXRlLCBzZWxlY3RUZWFtTWVtYmVyKG1lbWJlcklkKSkpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYW4gYWN0aW9uIHRvIHJlbW92ZSBhIHRlYW0gbWVtYmVyIGlkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1lbWJlcklkID0gJzE4MDAwMDAzJztcbiAgICBjb25zdCBleHBlY3RlZEFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFTU9WRV9URUFNX01FTUJFUixcbiAgICAgIHBheWxvYWQ6IHsgbWVtYmVySWQgfVxuICAgIH07XG4gICAgZXhwZWN0KGFjdGlvbnMucmVtb3ZlVGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZHJhZy1kcm9wIHJlZHVjZXJzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QocmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9FcXVhbCh7XG4gICAgICB0ZWFtTWVtYmVyczogW10sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGFuZGxlIEFERF9URUFNX01FTUJFUicsICgpID0+IHtcbiAgICBleHBlY3QoXG4gICAgICByZWR1Y2VyKFxuICAgICAgICB7XG4gICAgICAgICAgdGVhbU1lbWJlcnM6IFtdLFxuICAgICAgICAgIGVycm9yOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQUREX1RFQU1fTUVNQkVSLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIG1lbWJlcklkOiAnMTgwMDAwNCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApLnRvRXF1YWwoe1xuICAgICAgdGVhbU1lbWJlcnM6IFt7IGlkOiAnMTgwMDAwNCcgfV0sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgUkVNT1ZFX1RFQU1fTUVNQkVSJywgKCkgPT4ge1xuICAgIGV4cGVjdChcbiAgICAgIHJlZHVjZXIoXG4gICAgICAgIHtcbiAgICAgICAgICB0ZWFtTWVtYmVyczogW3sgaWQ6ICcxODAwMDA0JyB9LCB7IGlkOiAnMTgwMDAwOCcgfV0sXG4gICAgICAgICAgZXJyb3I6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRU1PVkVfVEVBTV9NRU1CRVIsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgbWVtYmVySWQ6ICcxODAwMDA0J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgICkudG9FcXVhbCh7XG4gICAgICB0ZWFtTWVtYmVyczogW10sXG4gICAgICBlcnJvcjogJydcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=