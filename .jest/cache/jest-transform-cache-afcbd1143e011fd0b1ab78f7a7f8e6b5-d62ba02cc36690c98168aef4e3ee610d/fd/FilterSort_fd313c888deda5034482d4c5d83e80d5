19ed63e8461ea6ca92174cf8fc34bf7c
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const react_1 = __importStar(require("react"));

const react_native_1 = require("react-native");

const FontAwesome_1 = __importDefault(require("react-native-vector-icons/FontAwesome"));

class FilterSort extends react_1.Component {
  render() {
    return react_1.default.createElement(react_native_1.View, {
      style: styles.icons
    }, react_1.default.createElement(react_native_1.TouchableOpacity, {
      style: styles.filter
    }, react_1.default.createElement(react_native_1.Text, {
      style: styles.iconText
    }, "Filter"), react_1.default.createElement(FontAwesome_1.default, {
      name: "filter",
      size: 20,
      color: "#757575"
    })), react_1.default.createElement(react_native_1.TouchableOpacity, {
      style: styles.sort
    }, react_1.default.createElement(react_native_1.Text, {
      style: styles.iconText
    }, "Sort"), react_1.default.createElement(FontAwesome_1.default, {
      name: "sort",
      size: 20,
      color: "#757575"
    })));
  }

}

exports.default = FilterSort;
const styles = react_native_1.StyleSheet.create({
  icons: {
    flex: 1,
    flexDirection: 'row'
  },
  filter: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-evenly'
  },
  sort: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-evenly'
  },
  iconText: {
    color: '#757575'
  }
}); //# sourceMappingURL=FilterSort.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbHRlclNvcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsTUFBQSxPQUFBLEdBQUEsWUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxNQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLE1BQUEsYUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsdUNBQUEsQ0FBQSxDQUFBOztBQUVBLE1BQUEsVUFBQSxTQUF3QyxPQUFBLENBQUEsU0FBeEMsQ0FBaUQ7QUFDL0MsRUFBQSxNQUFNLEdBQUE7QUFDSixXQUNFLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxJQUFELEVBQUs7QUFBQyxNQUFBLEtBQUssRUFBRSxNQUFNLENBQUM7QUFBZixLQUFMLEVBQ0UsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsY0FBQSxDQUFBLGdCQUFELEVBQWlCO0FBQUMsTUFBQSxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQWYsS0FBakIsRUFDRSxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxjQUFBLENBQUEsSUFBRCxFQUFLO0FBQUMsTUFBQSxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQWYsS0FBTCxFQUE0QixRQUE1QixDQURGLEVBRUUsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsYUFBQSxDQUFBLE9BQUQsRUFBSztBQUFDLE1BQUEsSUFBSSxFQUFDLFFBQU47QUFBZSxNQUFBLElBQUksRUFBRSxFQUFyQjtBQUF5QixNQUFBLEtBQUssRUFBQztBQUEvQixLQUFMLENBRkYsQ0FERixFQUtFLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxnQkFBRCxFQUFpQjtBQUFDLE1BQUEsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUFmLEtBQWpCLEVBQ0UsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsY0FBQSxDQUFBLElBQUQsRUFBSztBQUFDLE1BQUEsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUFmLEtBQUwsRUFBNEIsTUFBNUIsQ0FERixFQUVFLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGFBQUEsQ0FBQSxPQUFELEVBQUs7QUFBQyxNQUFBLElBQUksRUFBQyxNQUFOO0FBQWEsTUFBQSxJQUFJLEVBQUUsRUFBbkI7QUFBdUIsTUFBQSxLQUFLLEVBQUM7QUFBN0IsS0FBTCxDQUZGLENBTEYsQ0FERjtBQVlEOztBQWQ4Qzs7QUFBakQsT0FBQSxDQUFBLE9BQUEsR0FBQSxVQUFBO0FBaUJBLE1BQU0sTUFBTSxHQUFHLGNBQUEsQ0FBQSxVQUFBLENBQVcsTUFBWCxDQUFrQjtBQUMvQixFQUFBLEtBQUssRUFBRTtBQUNMLElBQUEsSUFBSSxFQUFFLENBREQ7QUFFTCxJQUFBLGFBQWEsRUFBRTtBQUZWLEdBRHdCO0FBSy9CLEVBQUEsTUFBTSxFQUFFO0FBQ04sSUFBQSxJQUFJLEVBQUUsQ0FEQTtBQUVOLElBQUEsYUFBYSxFQUFFLEtBRlQ7QUFHTixJQUFBLGNBQWMsRUFBRTtBQUhWLEdBTHVCO0FBVS9CLEVBQUEsSUFBSSxFQUFFO0FBQ0osSUFBQSxJQUFJLEVBQUUsQ0FERjtBQUVKLElBQUEsYUFBYSxFQUFFLEtBRlg7QUFHSixJQUFBLGNBQWMsRUFBRTtBQUhaLEdBVnlCO0FBZS9CLEVBQUEsUUFBUSxFQUFFO0FBQ1IsSUFBQSxLQUFLLEVBQUU7QUFEQztBQWZxQixDQUFsQixDQUFmLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgVGV4dCwgVmlldywgVG91Y2hhYmxlT3BhY2l0eSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgSWNvbiBmcm9tICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL0ZvbnRBd2Vzb21lJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyU29ydCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pY29uc30+XG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtzdHlsZXMuZmlsdGVyfT5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmljb25UZXh0fT5GaWx0ZXI8L1RleHQ+XG4gICAgICAgICAgPEljb24gbmFtZT1cImZpbHRlclwiIHNpemU9ezIwfSBjb2xvcj1cIiM3NTc1NzVcIiAvPlxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtzdHlsZXMuc29ydH0+XG4gICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5pY29uVGV4dH0+U29ydDwvVGV4dD5cbiAgICAgICAgICA8SWNvbiBuYW1lPVwic29ydFwiIHNpemU9ezIwfSBjb2xvcj1cIiM3NTc1NzVcIiAvPlxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGljb25zOiB7XG4gICAgZmxleDogMSxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93J1xuICB9LFxuICBmaWx0ZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5J1xuICB9LFxuICBzb3J0OiB7XG4gICAgZmxleDogMSxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWV2ZW5seSdcbiAgfSxcbiAgaWNvblRleHQ6IHtcbiAgICBjb2xvcjogJyM3NTc1NzUnXG4gIH1cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==