04e74d8e2f9a322cd8bdb956cb39a662
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const reducers_1 = require("../drag-and-drop/reducers");

const actions = __importStar(require("../drag-and-drop/actions"));

const types_1 = require("../drag-and-drop/types"); // import { teamMembers, memberId } from '../../config/jest/mockData';
// export const initialState: ISuperQueueProps = {
//   teamMembers: [],
//   error: ''
// };
// export const reducer = (
//   state: ISuperQueueProps = initialState,
//   action: Action
// ) => {
//   const { teamMembers } = state;
//   const SELECT = ActionTypes.SELECT_TEAM_MEMBER;
//   const UNSELECT = ActionTypes.UNSELECT_TEAM_MEMBER;
//   switch (action.type) {
//     case SELECT || UNSELECT:
//       const memberId = action.payload.memberId;
//       // check if member is already in the team
//       const memberIdPresent = teamMembers.some(
//         member => member.id === memberId
//       );
//       // add member if not already there
//       if (!memberIdPresent && SELECT) {
//         return {
//           ...state,
//           teamMembers: [...state.teamMembers, { id: action.payload.memberId }]
//         };
//         // remove member if already there
//       } else if (memberIdPresent && UNSELECT) {
//         return {
//           ...state,
//           teamMembers: teamMembers.filter(member => member.id !== memberId)
//         };
//       } else {
//         return { ...state, error: 'oops' };
//       }
//     default:
//       return state;
//   }
// };


describe('drag-drop actions', () => {
  it('should create an action to select a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.SELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.selectTeamMember(memberId)).toEqual(expectedAction); // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();
  });
  it('should create an action to remove a team member id', () => {
    const memberId = '18000003';
    const expectedAction = {
      type: types_1.ActionTypes.UNSELECT_TEAM_MEMBER,
      payload: {
        memberId
      }
    };
    expect(actions.unSelectTeamMember(memberId)).toEqual(expectedAction);
  });
});
describe('drag-drop reducers', () => {
  it('should return the initial state', () => {
    expect(reducers_1.reducer(undefined, {})).toEqual([{
      teamMembers: [],
      error: ''
    }]);
  });
}); //# sourceMappingURL=drag-drop-tests.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWctZHJvcC10ZXN0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsMkJBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQTs7QUFDQSxNQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQSxDLENBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsUUFBUSxDQUFDLG1CQUFELEVBQXNCLE1BQUs7QUFDakMsRUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsTUFBSztBQUM1RCxVQUFNLFFBQVEsR0FBRyxVQUFqQjtBQUNBLFVBQU0sY0FBYyxHQUFHO0FBQ3JCLE1BQUEsSUFBSSxFQUFFLE9BQUEsQ0FBQSxXQUFBLENBQVksa0JBREc7QUFFckIsTUFBQSxPQUFPLEVBQUU7QUFBRSxRQUFBO0FBQUY7QUFGWSxLQUF2QjtBQUlBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBUixDQUF5QixRQUF6QixDQUFELENBQU4sQ0FBMkMsT0FBM0MsQ0FBbUQsY0FBbkQsRUFONEQsQ0FPNUQ7QUFDRCxHQVJDLENBQUY7QUFTQSxFQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxNQUFLO0FBQzVELFVBQU0sUUFBUSxHQUFHLFVBQWpCO0FBQ0EsVUFBTSxjQUFjLEdBQUc7QUFDckIsTUFBQSxJQUFJLEVBQUUsT0FBQSxDQUFBLFdBQUEsQ0FBWSxvQkFERztBQUVyQixNQUFBLE9BQU8sRUFBRTtBQUFFLFFBQUE7QUFBRjtBQUZZLEtBQXZCO0FBSUEsSUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFSLENBQTJCLFFBQTNCLENBQUQsQ0FBTixDQUE2QyxPQUE3QyxDQUFxRCxjQUFyRDtBQUNELEdBUEMsQ0FBRjtBQVFELENBbEJPLENBQVI7QUFvQkEsUUFBUSxDQUFDLG9CQUFELEVBQXVCLE1BQUs7QUFDbEMsRUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsTUFBSztBQUN6QyxJQUFBLE1BQU0sQ0FBQyxVQUFBLENBQUEsT0FBQSxDQUFRLFNBQVIsRUFBbUIsRUFBbkIsQ0FBRCxDQUFOLENBQStCLE9BQS9CLENBQXVDLENBQ3JDO0FBQ0UsTUFBQSxXQUFXLEVBQUUsRUFEZjtBQUVFLE1BQUEsS0FBSyxFQUFFO0FBRlQsS0FEcUMsQ0FBdkM7QUFNRCxHQVBDLENBQUY7QUFRRCxDQVRPLENBQVIsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsU3RhdGUsIHJlZHVjZXIgfSBmcm9tICcuLi9kcmFnLWFuZC1kcm9wL3JlZHVjZXJzJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC9hY3Rpb25zJztcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSAnLi4vZHJhZy1hbmQtZHJvcC90eXBlcyc7XG5cbi8vIGltcG9ydCB7IHRlYW1NZW1iZXJzLCBtZW1iZXJJZCB9IGZyb20gJy4uLy4uL2NvbmZpZy9qZXN0L21vY2tEYXRhJztcblxuLy8gZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogSVN1cGVyUXVldWVQcm9wcyA9IHtcbi8vICAgdGVhbU1lbWJlcnM6IFtdLFxuLy8gICBlcnJvcjogJydcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCByZWR1Y2VyID0gKFxuLy8gICBzdGF0ZTogSVN1cGVyUXVldWVQcm9wcyA9IGluaXRpYWxTdGF0ZSxcbi8vICAgYWN0aW9uOiBBY3Rpb25cbi8vICkgPT4ge1xuLy8gICBjb25zdCB7IHRlYW1NZW1iZXJzIH0gPSBzdGF0ZTtcbi8vICAgY29uc3QgU0VMRUNUID0gQWN0aW9uVHlwZXMuU0VMRUNUX1RFQU1fTUVNQkVSO1xuLy8gICBjb25zdCBVTlNFTEVDVCA9IEFjdGlvblR5cGVzLlVOU0VMRUNUX1RFQU1fTUVNQkVSO1xuLy8gICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4vLyAgICAgY2FzZSBTRUxFQ1QgfHwgVU5TRUxFQ1Q6XG4vLyAgICAgICBjb25zdCBtZW1iZXJJZCA9IGFjdGlvbi5wYXlsb2FkLm1lbWJlcklkO1xuLy8gICAgICAgLy8gY2hlY2sgaWYgbWVtYmVyIGlzIGFscmVhZHkgaW4gdGhlIHRlYW1cbi8vICAgICAgIGNvbnN0IG1lbWJlcklkUHJlc2VudCA9IHRlYW1NZW1iZXJzLnNvbWUoXG4vLyAgICAgICAgIG1lbWJlciA9PiBtZW1iZXIuaWQgPT09IG1lbWJlcklkXG4vLyAgICAgICApO1xuLy8gICAgICAgLy8gYWRkIG1lbWJlciBpZiBub3QgYWxyZWFkeSB0aGVyZVxuLy8gICAgICAgaWYgKCFtZW1iZXJJZFByZXNlbnQgJiYgU0VMRUNUKSB7XG4vLyAgICAgICAgIHJldHVybiB7XG4vLyAgICAgICAgICAgLi4uc3RhdGUsXG4vLyAgICAgICAgICAgdGVhbU1lbWJlcnM6IFsuLi5zdGF0ZS50ZWFtTWVtYmVycywgeyBpZDogYWN0aW9uLnBheWxvYWQubWVtYmVySWQgfV1cbi8vICAgICAgICAgfTtcbi8vICAgICAgICAgLy8gcmVtb3ZlIG1lbWJlciBpZiBhbHJlYWR5IHRoZXJlXG4vLyAgICAgICB9IGVsc2UgaWYgKG1lbWJlcklkUHJlc2VudCAmJiBVTlNFTEVDVCkge1xuLy8gICAgICAgICByZXR1cm4ge1xuLy8gICAgICAgICAgIC4uLnN0YXRlLFxuLy8gICAgICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5maWx0ZXIobWVtYmVyID0+IG1lbWJlci5pZCAhPT0gbWVtYmVySWQpXG4vLyAgICAgICAgIH07XG4vLyAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3I6ICdvb3BzJyB9O1xuLy8gICAgICAgfVxuLy8gICAgIGRlZmF1bHQ6XG4vLyAgICAgICByZXR1cm4gc3RhdGU7XG4vLyAgIH1cbi8vIH07XG5kZXNjcmliZSgnZHJhZy1kcm9wIGFjdGlvbnMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFuIGFjdGlvbiB0byBzZWxlY3QgYSB0ZWFtIG1lbWJlciBpZCcsICgpID0+IHtcbiAgICBjb25zdCBtZW1iZXJJZCA9ICcxODAwMDAwMyc7XG4gICAgY29uc3QgZXhwZWN0ZWRBY3Rpb24gPSB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5TRUxFQ1RfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnNlbGVjdFRlYW1NZW1iZXIobWVtYmVySWQpKS50b0VxdWFsKGV4cGVjdGVkQWN0aW9uKTtcbiAgICAvLyBleHBlY3QocmVkdWNlcihpbml0aWFsU3RhdGUsIHNlbGVjdFRlYW1NZW1iZXIobWVtYmVySWQpKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBhY3Rpb24gdG8gcmVtb3ZlIGEgdGVhbSBtZW1iZXIgaWQnLCAoKSA9PiB7XG4gICAgY29uc3QgbWVtYmVySWQgPSAnMTgwMDAwMDMnO1xuICAgIGNvbnN0IGV4cGVjdGVkQWN0aW9uID0ge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuVU5TRUxFQ1RfVEVBTV9NRU1CRVIsXG4gICAgICBwYXlsb2FkOiB7IG1lbWJlcklkIH1cbiAgICB9O1xuICAgIGV4cGVjdChhY3Rpb25zLnVuU2VsZWN0VGVhbU1lbWJlcihtZW1iZXJJZCkpLnRvRXF1YWwoZXhwZWN0ZWRBY3Rpb24pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZHJhZy1kcm9wIHJlZHVjZXJzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QocmVkdWNlcih1bmRlZmluZWQsIHt9KSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIHRlYW1NZW1iZXJzOiBbXSxcbiAgICAgICAgZXJyb3I6ICcnXG4gICAgICB9XG4gICAgXSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9