524a080a8a0e9afb9a99833bd72b15fe
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const react_1 = __importStar(require("react"));

const react_native_1 = require("react-native");

const data_1 = require("../../../../data");

const MaterialIcons_1 = __importDefault(require("react-native-vector-icons/MaterialIcons"));

const TeamMember_1 = __importDefault(require("./TeamMember"));

class TeamList extends react_1.Component {
  render() {
    return react_1.default.createElement(react_native_1.View, {
      style: styles.container
    }, react_1.default.createElement(react_native_1.View, {
      style: styles.teamSearch
    }, react_1.default.createElement(react_native_1.View, {
      style: styles.searchInput
    }, react_1.default.createElement(react_native_1.TextInput, {
      style: styles.inputText,
      placeholder: 'Enter First or Last Name',
      placeholderTextColor: '#c6cacc',
      underlineColorAndroid: '#fff',
      autoCorrect: false
    }), react_1.default.createElement(MaterialIcons_1.default, {
      name: "search",
      size: 18,
      color: "#BDBDBD"
    }))), react_1.default.createElement(react_native_1.FlatList, {
      scrollEnabled: this.props.scrollEnabled,
      style: styles.teamContainer,
      data: data_1.workOrders,
      extraData: this.props,
      renderItem: ({
        item
      }) => react_1.default.createElement(TeamMember_1.default, {
        item: item,
        selectTeamMember: this.props.selectTeamMember,
        teamArray: this.props.teamArray,
        addCurrentId: this.props.addCurrentId,
        currentId: this.props.currentId
      }),
      keyExtractor: item => item.id
    }), react_1.default.createElement(react_native_1.View, {
      style: styles.addGroups
    }, react_1.default.createElement(react_native_1.TouchableOpacity, {
      style: styles.addGroupButton
    }, react_1.default.createElement(react_native_1.Text, {
      style: styles.addGroupText
    }, "+ Add Groups or People"))));
  }

}

exports.default = TeamList;
const styles = react_native_1.StyleSheet.create({
  container: {
    flex: 1
  },
  teamSearch: {
    flex: 0.1,
    borderBottomWidth: 1,
    borderStyle: 'solid',
    borderColor: '#c6cacc',
    alignItems: 'center',
    justifyContent: 'center'
  },
  searchInput: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 3,
    height: '100%'
  },
  inputText: {
    width: '80%',
    fontSize: 12
  },
  teamContainer: {
    flex: 2
  },
  addGroups: {
    flex: 1,
    paddingTop: '15%'
  },
  addGroupButton: {
    alignSelf: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: '#c6cacc',
    height: 45,
    paddingRight: '5%',
    paddingLeft: '5%'
  },
  addGroupText: {
    fontSize: 12
  }
}); //# sourceMappingURL=TeamList.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VyxFQUFFLENBSEM7QUFJZCxJQUFBLFdBQVcsRUFBRSxPQUpDO0FBS2QsSUFBQSxXQUFXLEVBQUUsU0FMQztBQU1kLElBQUEsTUFBTSxFQUFFLEVBTk07QUFPZCxJQUFBLFlBQVksRUFBRSxJQVBBO0FBUWQsSUFBQSxXQUFXLEVBQUU7QUFSQyxHQTlCZTtBQXdDL0IsRUFBQSxZQUFZLEVBQUU7QUFDWixJQUFBLFFBQVEsRUFBRTtBQURFO0FBeENpQixDQUFsQixDQUFmLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgU3R5bGVTaGVldCxcbiAgVGV4dCxcbiAgVmlldyxcbiAgVG91Y2hhYmxlT3BhY2l0eSxcbiAgRmxhdExpc3QsXG4gIFRleHRJbnB1dFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd29ya09yZGVycyB9IGZyb20gJy4uLy4uLy4uLy4uL2RhdGEnO1xuaW1wb3J0IEljb24gZnJvbSAncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbEljb25zJztcbmltcG9ydCBUZWFtTWVtYmVyIGZyb20gJy4vVGVhbU1lbWJlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlYW1MaXN0IGV4dGVuZHMgQ29tcG9uZW50PGFueSwgYW55PiB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnRlYW1TZWFyY2h9PlxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuc2VhcmNoSW5wdXR9PlxuICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLmlucHV0VGV4dH1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9eydFbnRlciBGaXJzdCBvciBMYXN0IE5hbWUnfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlclRleHRDb2xvcj17JyNjNmNhY2MnfVxuICAgICAgICAgICAgICB1bmRlcmxpbmVDb2xvckFuZHJvaWQ9eycjZmZmJ31cbiAgICAgICAgICAgICAgYXV0b0NvcnJlY3Q9e2ZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxJY29uIG5hbWU9XCJzZWFyY2hcIiBzaXplPXsxOH0gY29sb3I9XCIjQkRCREJEXCIgLz5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVmlldz5cbiAgICAgICAgPEZsYXRMaXN0XG4gICAgICAgICAgc2Nyb2xsRW5hYmxlZD17dGhpcy5wcm9wcy5zY3JvbGxFbmFibGVkfVxuICAgICAgICAgIHN0eWxlPXtzdHlsZXMudGVhbUNvbnRhaW5lcn1cbiAgICAgICAgICBkYXRhPXt3b3JrT3JkZXJzfVxuICAgICAgICAgIGV4dHJhRGF0YT17dGhpcy5wcm9wc31cbiAgICAgICAgICByZW5kZXJJdGVtPXsoeyBpdGVtIH0pID0+IChcbiAgICAgICAgICAgIDxUZWFtTWVtYmVyXG4gICAgICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAgICAgIHNlbGVjdFRlYW1NZW1iZXI9e3RoaXMucHJvcHMuc2VsZWN0VGVhbU1lbWJlcn1cbiAgICAgICAgICAgICAgdGVhbUFycmF5PXt0aGlzLnByb3BzLnRlYW1BcnJheX1cbiAgICAgICAgICAgICAgYWRkQ3VycmVudElkPXt0aGlzLnByb3BzLmFkZEN1cnJlbnRJZH1cbiAgICAgICAgICAgICAgY3VycmVudElkPXt0aGlzLnByb3BzLmN1cnJlbnRJZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICBrZXlFeHRyYWN0b3I9e2l0ZW0gPT4gaXRlbS5pZH1cbiAgICAgICAgLz5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5hZGRHcm91cHN9PlxuICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IHN0eWxlPXtzdHlsZXMuYWRkR3JvdXBCdXR0b259PlxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5hZGRHcm91cFRleHR9PisgQWRkIEdyb3VwcyBvciBQZW9wbGU8L1RleHQ+XG4gICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGZsZXg6IDFcbiAgfSxcbiAgdGVhbVNlYXJjaDoge1xuICAgIGZsZXg6IDAuMSxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogMSxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJDb2xvcjogJyNjNmNhY2MnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICB9LFxuICBzZWFyY2hJbnB1dDoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgaGVpZ2h0OiAnMTAwJSdcbiAgfSxcbiAgaW5wdXRUZXh0OiB7XG4gICAgd2lkdGg6ICc4MCUnLFxuICAgIGZvbnRTaXplOiAxMlxuICB9LFxuICB0ZWFtQ29udGFpbmVyOiB7XG4gICAgZmxleDogMlxuICB9LFxuICBhZGRHcm91cHM6IHtcbiAgICBmbGV4OiAxLFxuICAgIHBhZGRpbmdUb3A6ICcxNSUnXG4gIH0sXG4gIGFkZEdyb3VwQnV0dG9uOiB7XG4gICAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyQ29sb3I6ICcjYzZjYWNjJyxcbiAgICBoZWlnaHQ6IDQ1LFxuICAgIHBhZGRpbmdSaWdodDogJzUlJyxcbiAgICBwYWRkaW5nTGVmdDogJzUlJ1xuICB9LFxuICBhZGRHcm91cFRleHQ6IHtcbiAgICBmb250U2l6ZTogMTJcbiAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9