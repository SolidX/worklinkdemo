{"version":3,"sources":["drag-drop-tests.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,MAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,wBAAA,CAAA,C,CAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAQ,CAAC,SAAD,EAAY,MAAK;AACvB,EAAA,EAAE,CAAC,oDAAD,EAAuD,MAAK;AAC5D,UAAM,QAAQ,GAAG,UAAjB;AACA,UAAM,cAAc,GAAG;AACrB,MAAA,IAAI,EAAE,OAAA,CAAA,WAAA,CAAY,kBADG;AAErB,MAAA,OAAO,EAAE;AAAE,QAAA;AAAF;AAFY,KAAvB;AAIA,IAAA,MAAM,CAAC,OAAO,CAAC,gBAAR,CAAyB,QAAzB,CAAD,CAAN,CAA2C,OAA3C,CAAmD,cAAnD,EAN4D,CAO5D;AACD,GARC,CAAF;AASD,CAVO,CAAR,C","sourcesContent":["import React from 'react';\nimport { initialState, reducer } from '../drag-and-drop/reducers';\nimport { selectTeamMember, unSelectTeamMember } from '../drag-and-drop/actions';\nimport * as actions from '../drag-and-drop/actions';\nimport { ActionTypes } from '../drag-and-drop/types';\n\nimport { teamMembers, memberId } from '../../config/jest/mockData';\n\n// export const initialState: ISuperQueueProps = {\n//   teamMembers: [],\n//   error: ''\n// };\n\n// export const reducer = (\n//   state: ISuperQueueProps = initialState,\n//   action: Action\n// ) => {\n//   const { teamMembers } = state;\n//   const SELECT = ActionTypes.SELECT_TEAM_MEMBER;\n//   const UNSELECT = ActionTypes.UNSELECT_TEAM_MEMBER;\n//   switch (action.type) {\n//     case SELECT || UNSELECT:\n//       const memberId = action.payload.memberId;\n//       // check if member is already in the team\n//       const memberIdPresent = teamMembers.some(\n//         member => member.id === memberId\n//       );\n//       // add member if not already there\n//       if (!memberIdPresent && SELECT) {\n//         return {\n//           ...state,\n//           teamMembers: [...state.teamMembers, { id: action.payload.memberId }]\n//         };\n//         // remove member if already there\n//       } else if (memberIdPresent && UNSELECT) {\n//         return {\n//           ...state,\n//           teamMembers: teamMembers.filter(member => member.id !== memberId)\n//         };\n//       } else {\n//         return { ...state, error: 'oops' };\n//       }\n//     default:\n//       return state;\n//   }\n// };\ndescribe('actions', () => {\n  it('should create an action to select a team member id', () => {\n    const memberId = '18000003';\n    const expectedAction = {\n      type: ActionTypes.SELECT_TEAM_MEMBER,\n      payload: { memberId }\n    };\n    expect(actions.selectTeamMember(memberId)).toEqual(expectedAction);\n    // expect(reducer(initialState, selectTeamMember(memberId))).toMatchSnapshot();\n  });\n});\n"],"sourceRoot":""}