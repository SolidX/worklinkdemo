d218a39b30c8ca7527c08c5382f43aac
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("./types");

exports.initialState = {
  teamMembers: [],
  error: ''
};

exports.reducer = (state = exports.initialState, action) => {
  const {
    teamMembers
  } = state;
  const ADD = types_1.ActionTypes.ADD_TEAM_MEMBER;
  const REMOVE = types_1.ActionTypes.REMOVE_TEAM_MEMBER;
  let memberId;

  switch (action.type) {
    case ADD:
      memberId = action.payload.memberId; // check if member is already in the team

      const memberIdPresent = teamMembers.some(member => member.id === memberId);
      console.log('outside!!', teamMembers, memberId, action.type); // add member if not already there

      if (!memberIdPresent && ADD) {
        console.log('addddd');
        return Object.assign({}, state, {
          teamMembers: [...state.teamMembers, {
            id: action.payload.memberId
          }]
        }); // remove member if already there
      } else if (memberIdPresent && REMOVE) {
        console.log('removveee');
        return Object.assign({}, state, {
          teamMembers: teamMembers.filter(member => member.id !== memberId)
        });
      } else {
        return Object.assign({}, state, {
          error: 'oops'
        });
      }

    // case REMOVE:
    //   memberId = action.payload.memberId;
    //         return {
    //     ...state,
    //     teamMembers: teamMembers.filter(member => member.id !== memberId)
    //   };

    default:
      return state;
  }
}; //# sourceMappingURL=reducers.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBR2EsT0FBQSxDQUFBLFlBQUEsR0FBaUM7QUFDNUMsRUFBQSxXQUFXLEVBQUUsRUFEK0I7QUFFNUMsRUFBQSxLQUFLLEVBQUU7QUFGcUMsQ0FBakM7O0FBS0EsT0FBQSxDQUFBLE9BQUEsR0FBVSxDQUNyQixLQUFBLEdBQTBCLE9BQUEsQ0FBQSxZQURMLEVBRXJCLE1BRnFCLEtBR25CO0FBQ0YsUUFBTTtBQUFFLElBQUE7QUFBRixNQUFrQixLQUF4QjtBQUNBLFFBQU0sR0FBRyxHQUFHLE9BQUEsQ0FBQSxXQUFBLENBQVksZUFBeEI7QUFDQSxRQUFNLE1BQU0sR0FBRyxPQUFBLENBQUEsV0FBQSxDQUFZLGtCQUEzQjtBQUNBLE1BQUksUUFBSjs7QUFDQSxVQUFRLE1BQU0sQ0FBQyxJQUFmO0FBQ0UsU0FBSyxHQUFMO0FBQ0UsTUFBQSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxRQUExQixDQURGLENBRUU7O0FBQ0EsWUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDLElBQVosQ0FDdEIsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFQLEtBQWMsUUFERixDQUF4QjtBQUdBLE1BQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCLFdBQXpCLEVBQXNDLFFBQXRDLEVBQWdELE1BQU0sQ0FBQyxJQUF2RCxFQU5GLENBUUU7O0FBQ0EsVUFBSSxDQUFDLGVBQUQsSUFBb0IsR0FBeEIsRUFBNkI7QUFDM0IsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsV0FBVixFQUF1QjtBQUFFLFlBQUEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFQLENBQWU7QUFBckIsV0FBdkI7QUFETCxTQURWLENBQUEsQ0FIMkIsQ0FPM0I7QUFDRCxPQVJELE1BUU8sSUFBSSxlQUFlLElBQUksTUFBdkIsRUFBK0I7QUFDcEMsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVo7QUFFQSxlQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNLLEtBREwsRUFDVTtBQUNSLFVBQUEsV0FBVyxFQUFFLFdBQVcsQ0FBQyxNQUFaLENBQW1CLE1BQU0sSUFBSSxNQUFNLENBQUMsRUFBUCxLQUFjLFFBQTNDO0FBREwsU0FEVixDQUFBO0FBSUQsT0FQTSxNQU9BO0FBQ0wsZUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsRUFBWSxLQUFaLEVBQWlCO0FBQUUsVUFBQSxLQUFLLEVBQUU7QUFBVCxTQUFqQixDQUFBO0FBQ0Q7O0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0UsYUFBTyxLQUFQO0FBbkNKO0FBcUNELENBN0NZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IElTdXBlclF1ZXVlUHJvcHMgfSBmcm9tICcuLi8uLi9SZWFjdC9zY3JlZW5zL1N1cGVydmlzb3JRdWV1ZVNjcmVlbic7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IElTdXBlclF1ZXVlUHJvcHMgPSB7XG4gIHRlYW1NZW1iZXJzOiBbXSxcbiAgZXJyb3I6ICcnXG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChcbiAgc3RhdGU6IElTdXBlclF1ZXVlUHJvcHMgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uXG4pID0+IHtcbiAgY29uc3QgeyB0ZWFtTWVtYmVycyB9ID0gc3RhdGU7XG4gIGNvbnN0IEFERCA9IEFjdGlvblR5cGVzLkFERF9URUFNX01FTUJFUjtcbiAgY29uc3QgUkVNT1ZFID0gQWN0aW9uVHlwZXMuUkVNT1ZFX1RFQU1fTUVNQkVSO1xuICBsZXQgbWVtYmVySWQ7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFERDpcbiAgICAgIG1lbWJlcklkID0gYWN0aW9uLnBheWxvYWQubWVtYmVySWQ7XG4gICAgICAvLyBjaGVjayBpZiBtZW1iZXIgaXMgYWxyZWFkeSBpbiB0aGUgdGVhbVxuICAgICAgY29uc3QgbWVtYmVySWRQcmVzZW50ID0gdGVhbU1lbWJlcnMuc29tZShcbiAgICAgICAgbWVtYmVyID0+IG1lbWJlci5pZCA9PT0gbWVtYmVySWRcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygnb3V0c2lkZSEhJywgdGVhbU1lbWJlcnMsIG1lbWJlcklkLCBhY3Rpb24udHlwZSk7XG5cbiAgICAgIC8vIGFkZCBtZW1iZXIgaWYgbm90IGFscmVhZHkgdGhlcmVcbiAgICAgIGlmICghbWVtYmVySWRQcmVzZW50ICYmIEFERCkge1xuICAgICAgICBjb25zb2xlLmxvZygnYWRkZGRkJyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICB0ZWFtTWVtYmVyczogWy4uLnN0YXRlLnRlYW1NZW1iZXJzLCB7IGlkOiBhY3Rpb24ucGF5bG9hZC5tZW1iZXJJZCB9XVxuICAgICAgICB9O1xuICAgICAgICAvLyByZW1vdmUgbWVtYmVyIGlmIGFscmVhZHkgdGhlcmVcbiAgICAgIH0gZWxzZSBpZiAobWVtYmVySWRQcmVzZW50ICYmIFJFTU9WRSkge1xuICAgICAgICBjb25zb2xlLmxvZygncmVtb3Z2ZWVlJyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICB0ZWFtTWVtYmVyczogdGVhbU1lbWJlcnMuZmlsdGVyKG1lbWJlciA9PiBtZW1iZXIuaWQgIT09IG1lbWJlcklkKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGVycm9yOiAnb29wcycgfTtcbiAgICAgIH1cbiAgICAvLyBjYXNlIFJFTU9WRTpcbiAgICAvLyAgIG1lbWJlcklkID0gYWN0aW9uLnBheWxvYWQubWVtYmVySWQ7XG4gICAgLy8gICAgICAgICByZXR1cm4ge1xuICAgIC8vICAgICAuLi5zdGF0ZSxcbiAgICAvLyAgICAgdGVhbU1lbWJlcnM6IHRlYW1NZW1iZXJzLmZpbHRlcihtZW1iZXIgPT4gbWVtYmVyLmlkICE9PSBtZW1iZXJJZClcbiAgICAvLyAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=