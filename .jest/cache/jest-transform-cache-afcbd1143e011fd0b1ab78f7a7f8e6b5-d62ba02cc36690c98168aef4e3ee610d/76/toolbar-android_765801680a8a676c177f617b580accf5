4f50e3f734a8b6811116cfd46d1e9a11
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createToolbarAndroidComponent;
var _isEqual = babelHelpers.interopRequireDefault(require("lodash/isEqual"));
var _pick = babelHelpers.interopRequireDefault(require("lodash/pick"));
var _react = babelHelpers.interopRequireWildcard(require("react"));
var _propTypes = babelHelpers.interopRequireDefault(require("prop-types"));
var _reactNative = require("./react-native");var _jsxFileName = "/Users/ao60/Desktop/WorkFiles/WorklinkDemo/node_modules/react-native-vector-icons/lib/toolbar-android.js";

function createToolbarAndroidComponent(
IconNamePropType,
getImageSource)
{var _class, _temp;
  return _temp = _class = function (_PureComponent) {function IconToolbarAndroid() {babelHelpers.classCallCheck(this, IconToolbarAndroid);return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(IconToolbarAndroid).apply(this, arguments));}babelHelpers.createClass(IconToolbarAndroid, [{ key: "componentWillMount", value: function componentWillMount()






















      {
        this.updateIconSources(this.props);
      } }, { key: "componentWillReceiveProps", value: function componentWillReceiveProps(

      nextProps) {var _this = this;
        var keys = Object.keys(IconToolbarAndroid.propTypes);
        if (!(0, _isEqual.default)((0, _pick.default)(nextProps, keys), (0, _pick.default)(this.props, keys))) {
          var stateToEvict = {};
          if (!nextProps.logoName) {
            stateToEvict.logo = undefined;
          }
          if (!nextProps.navIconName) {
            stateToEvict.navIcon = undefined;
          }
          if (!nextProps.overflowIconName) {
            stateToEvict.overflowIcon = undefined;
          }
          if (this.state && Object.keys(stateToEvict).length) {
            this.setState(stateToEvict, function () {return _this.updateIconSources(nextProps);});
          } else {
            this.updateIconSources(nextProps);
          }
        }
      } }, { key: "updateIconSources", value: function updateIconSources(

      props) {var _this2 = this;
        var size = props.iconSize;
        var color = props.iconColor || props.titleColor;
        if (props.logoName) {
          getImageSource(props.logoName, size, color).then(function (logo) {return (
              _this2.setState({ logo: logo }));});

        }
        if (props.navIconName) {
          getImageSource(props.navIconName, size, color).then(function (navIcon) {return (
              _this2.setState({ navIcon: navIcon }));});

        }
        if (props.overflowIconName) {
          getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {return (
              _this2.setState({ overflowIcon: overflowIcon }));});

        }

        Promise.all(
        (props.actions || []).map(function (action) {
          if (action.iconName) {
            return getImageSource(
            action.iconName,
            action.iconSize || size,
            action.iconColor || color).
            then(function (icon) {return babelHelpers.objectSpread({}, action, { icon: icon });});
          }
          return Promise.resolve(action);
        })).
        then(function (actions) {return _this2.setState({ actions: actions });});
      } }, { key: "render", value: function render()

      {
        return _react.default.createElement(_reactNative.ToolbarAndroid, babelHelpers.extends({}, this.props, this.state, { __source: { fileName: _jsxFileName, lineNumber: 94 } }));
      } }]);babelHelpers.inherits(IconToolbarAndroid, _PureComponent);return IconToolbarAndroid;}(_react.PureComponent), _class.propTypes = { logoName: IconNamePropType, navIconName: IconNamePropType, overflowIconName: IconNamePropType, actions: _propTypes.default.arrayOf(_propTypes.default.shape({ title: _propTypes.default.string.isRequired, iconName: IconNamePropType, iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']), showWithText: _propTypes.default.bool })), iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]) }, _class.defaultProps = { iconSize: 24 }, _temp;

}