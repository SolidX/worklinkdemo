719e15cc1a2623acc1b47f16c3c9da52
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createIconButtonComponent;var _isString = babelHelpers.interopRequireDefault(require("lodash/isString"));
var _omit = babelHelpers.interopRequireDefault(require("lodash/omit"));
var _pick = babelHelpers.interopRequireDefault(require("lodash/pick"));
var _react = babelHelpers.interopRequireWildcard(require("react"));
var _propTypes = babelHelpers.interopRequireDefault(require("prop-types"));
var _reactNative = require("./react-native");var _jsxFileName = "/Users/ao60/Desktop/WorkFiles/WorklinkDemo/node_modules/react-native-vector-icons/lib/icon-button.js";

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 8 },

  touchable: {
    overflow: 'hidden' },

  icon: {
    marginRight: 10 },

  text: {
    fontWeight: '600',
    backgroundColor: 'transparent' } });



var IOS7_BLUE = '#007AFF';

function createIconButtonComponent(Icon) {var _class, _temp;
  return _temp = _class = function (_PureComponent) {function IconButton() {babelHelpers.classCallCheck(this, IconButton);return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(IconButton).apply(this, arguments));}babelHelpers.createClass(IconButton, [{ key: "render", value: function render()




















      {var _this$props =
        this.props,style = _this$props.style,iconStyle = _this$props.iconStyle,children = _this$props.children,restProps = babelHelpers.objectWithoutProperties(_this$props, ["style", "iconStyle", "children"]);

        var iconProps = (0, _pick.default)(
        restProps,
        Object.keys(_reactNative.Text.propTypes),
        'style',
        'name',
        'size',
        'color');

        var touchableProps = (0, _pick.default)(
        restProps,
        Object.keys(_reactNative.TouchableHighlight.propTypes));

        var props = (0, _omit.default)(
        restProps,
        Object.keys(iconProps),
        Object.keys(touchableProps),
        'iconStyle',
        'borderRadius',
        'backgroundColor');

        iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;

        var colorStyle = (0, _pick.default)(this.props, 'color');
        var blockStyle = (0, _pick.default)(this.props, 'backgroundColor', 'borderRadius');

        return (
          _react.default.createElement(_reactNative.TouchableHighlight, babelHelpers.extends({
            style: [styles.touchable, blockStyle] },
          touchableProps, { __source: { fileName: _jsxFileName, lineNumber: 80 } }),

          _react.default.createElement(_reactNative.View, babelHelpers.extends({ style: [styles.container, blockStyle, style] }, props, { __source: { fileName: _jsxFileName, lineNumber: 84 } }),
          _react.default.createElement(Icon, babelHelpers.extends({}, iconProps, { __source: { fileName: _jsxFileName, lineNumber: 85 } })),
          (0, _isString.default)(children) ?
          _react.default.createElement(_reactNative.Text, { style: [styles.text, colorStyle], __source: { fileName: _jsxFileName, lineNumber: 87 } }, children) :

          children)));




      } }]);babelHelpers.inherits(IconButton, _PureComponent);return IconButton;}(_react.PureComponent), _class.propTypes = { backgroundColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), borderRadius: _propTypes.default.number, color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), size: _propTypes.default.number, iconStyle: _propTypes.default.any, style: _propTypes.default.any, children: _propTypes.default.node }, _class.defaultProps = { backgroundColor: IOS7_BLUE, borderRadius: 5, color: 'white', size: 20 }, _temp;

}