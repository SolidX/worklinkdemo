{"file":"/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx","mappings":";;;;;AACA,kDAA0B;AAC1B,wEAA8C;AAG9C,8EAA2C;AAG3C,wCAAwC;AACxC,qFAA6D;AAE7D,4EAA4E;AAC5E,MAAM,SAAS,GAAG,0BAAc,EAAE,CAAC;AAEnC,MAAM,YAAY,GAAG;IACnB,WAAW,EAAE,EAAE;IACf,KAAK,EAAE,EAAE;CACV,CAAC;AAEF,oDAAoD;AACpD,sCAAsC;AACtC,4DAA4D;AAC5D,oDAAoD;AACpD,UAAU;AACV,gDAAgD;AAChD,QAAQ;AACR,MAAM;AACN,qGAAqG;AAErG,sDAAsD;AACtD,6DAA6D;AAC7D,sDAAsD;AACtD,8CAA8C;AAC9C,WAAW;AACX,oCAAoC;AACpC,6EAA6E;AAC7E,2CAA2C;AAE3C,2BAA2B;AAC3B,6BAA6B;AAC7B,6BAA6B;AAC7B,mBAAmB;AACnB,2BAA2B;AAC3B,4BAA4B;AAC5B,+BAA+B;AAC/B,gCAAgC;AAChC,iCAAiC;AACjC,6BAA6B;AAC7B,8BAA8B;AAC9B,gCAAgC;AAChC,yBAAyB;AACzB,4BAA4B;AAC5B,wBAAwB;AACxB,6BAA6B;AAC7B,6BAA6B;AAC7B,SAAS;AAET,+BAA+B;AAC/B,+BAA+B;AAC/B,6BAA6B;AAC7B,uBAAuB;AACvB,kCAAkC;AAClC,wBAAwB;AACxB,WAAW;AACX,SAAS;AACT,wCAAwC;AACxC,iDAAiD;AACjD,QAAQ;AACR,MAAM;AAEN,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC7B,MAAM,UAAU,GAAG;QACjB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;QACrB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;QACvB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;QACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;QACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;KACrB,CAAC;IACF,MAAM,IAAI,GAAG,6BAAQ;SAClB,MAAM,CAAC,8BAAC,+BAAqB,IAAC,UAAU,EAAE,UAAU,GAAI,CAAC;SACzD,MAAM,EAAE,CAAC;IACZ,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;AACjC,CAAC,CAAC,CAAC","names":[],"sources":["/Users/ao60/Desktop/WorkFiles/WorklinkDemo/src/React/screens/__tests__/supervisor-queque-tests.tsx"],"sourcesContent":["import { shallow } from 'enzyme';\nimport React from 'react';\nimport configureStore from 'redux-mock-store';\nimport toJson from 'enzyme-to-json';\nimport {} from 'ts-jest';\nimport renderer from 'react-test-renderer';\nimport Props from '../SupervisorQueueScreen';\n\n// imported as an unconnected component!\nimport SupervisorQueueScreen from '../SupervisorQueueScreen';\n\n// const middlewares = []; // you can mock any middlewares here if necessary\nconst mockStore = configureStore();\n\nconst initialState = {\n  teamMembers: [],\n  error: ''\n};\n\n// describe('Testing SupervisorQueueScreen', () => {\n//   it('renders as expected', () => {\n//     const wrapper = shallow(<SupervisorQueueScreen  />, {\n//       context: { store: mockStore(initialState) }\n//     });\n//     expect(wrapper.dive()).toMatchSnapshot();\n//   });\n// });\n//jest.mock('react-navigation', ({withNavigation: (component: SupervisorQueueScreen) => component}));\n\n// describe('SupervisorQueueScreen rendering', () => {\n//   // const container = shallow(<SupervisorQueueScreen />);\n//   // it('should render a <DragContainer/>', () => {\n//   //   expect(container).toMatchSnapshot();\n//   // });\n//   it('renders correctly', () => {\n//     //   const tree = renderer.create(<SupervisorQueueScreen />).toJSON();\n//     //   expect(tree).toMatchSnapshot();\n\n//     const navigation = {\n//       navigate: jest.fn(),\n//       dispatch: jest.fn(),\n//       state: {},\n//       goBack: jest.fn(),\n//       dismiss: jest.fn(),\n//       openDrawer: jest.fn(),\n//       closeDrawer: jest.fn(),\n//       toggleDrawer: jest.fn(),\n//       getParam: jest.fn(),\n//       setParams: jest.fn(),\n//       addListener: jest.fn(),\n//       push: jest.fn(),\n//       replace: jest.fn(),\n//       pop: jest.fn(),\n//       popToTop: jest.fn(),\n//       isFocused: jest.fn()\n//     };\n\n//     const wrapper = shallow(\n//       <SupervisorQueueScreen\n//         //teamMembers={[]}\n//         //error={''}\n//         navigation={navigation}\n//         // {...props}\n//       />\n//     );\n//     const component = wrapper.dive();\n//     expect(toJson(wrapper)).toMatchSnapshot();\n//   });\n// });\n\ntest('renders correctly', () => {\n  const navigation = {\n    navigate: jest.fn(),\n    dispatch: jest.fn(),\n    state: {},\n    goBack: jest.fn(),\n    dismiss: jest.fn(),\n    openDrawer: jest.fn(),\n    closeDrawer: jest.fn(),\n    toggleDrawer: jest.fn(),\n    getParam: jest.fn(),\n    setParams: jest.fn(),\n    addListener: jest.fn(),\n    push: jest.fn(),\n    replace: jest.fn(),\n    pop: jest.fn(),\n    popToTop: jest.fn(),\n    isFocused: jest.fn()\n  };\n  const tree = renderer\n    .create(<SupervisorQueueScreen navigation={navigation} />)\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"],"version":3}