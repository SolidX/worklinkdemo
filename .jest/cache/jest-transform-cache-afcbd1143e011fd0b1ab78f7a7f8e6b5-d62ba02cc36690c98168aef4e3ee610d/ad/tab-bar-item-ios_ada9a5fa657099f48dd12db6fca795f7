5dda0a33edff013faa6229014005d060
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createTabBarItemIOSComponent;
var _isEqual = babelHelpers.interopRequireDefault(require("lodash/isEqual"));
var _pick = babelHelpers.interopRequireDefault(require("lodash/pick"));
var _react = babelHelpers.interopRequireWildcard(require("react"));
var _propTypes = babelHelpers.interopRequireDefault(require("prop-types"));
var _reactNative = require("./react-native");var _jsxFileName = "/Users/ao60/Desktop/WorkFiles/WorklinkDemo/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js";

function createTabBarItemIOSComponent(
IconNamePropType,
getImageSource)
{var _class, _temp;
  return _temp = _class = function (_PureComponent) {function TabBarItemIOS() {babelHelpers.classCallCheck(this, TabBarItemIOS);return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TabBarItemIOS).apply(this, arguments));}babelHelpers.createClass(TabBarItemIOS, [{ key: "componentWillMount", value: function componentWillMount()















      {
        this.updateIconSources(this.props);
      } }, { key: "componentWillReceiveProps", value: function componentWillReceiveProps(

      nextProps) {
        var keys = Object.keys(TabBarItemIOS.propTypes);
        if (!(0, _isEqual.default)((0, _pick.default)(nextProps, keys), (0, _pick.default)(this.props, keys))) {
          this.updateIconSources(nextProps);
        }
      } }, { key: "updateIconSources", value: function updateIconSources(

      props) {var _this = this;
        if (props.iconName) {
          getImageSource(
          props.iconName,
          props.iconSize,
          props.iconColor).
          then(function (icon) {return _this.setState({ icon: icon });});
        }
        if (props.selectedIconName || props.selectedIconColor) {
          var selectedIconName = props.selectedIconName || props.iconName;
          var selectedIconColor = props.selectedIconColor || props.iconColor;
          getImageSource(
          selectedIconName,
          props.iconSize,
          selectedIconColor).
          then(function (selectedIcon) {return _this.setState({ selectedIcon: selectedIcon });});
        }
      } }, { key: "render", value: function render()

      {
        return _react.default.createElement(_reactNative.TabBarIOS.Item, babelHelpers.extends({}, this.props, this.state, { __source: { fileName: _jsxFileName, lineNumber: 59 } }));
      } }]);babelHelpers.inherits(TabBarItemIOS, _PureComponent);return TabBarItemIOS;}(_react.PureComponent), _class.propTypes = { iconName: IconNamePropType.isRequired, selectedIconName: IconNamePropType, iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), selectedIconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]) }, _class.defaultProps = { iconSize: 30 }, _temp;

}