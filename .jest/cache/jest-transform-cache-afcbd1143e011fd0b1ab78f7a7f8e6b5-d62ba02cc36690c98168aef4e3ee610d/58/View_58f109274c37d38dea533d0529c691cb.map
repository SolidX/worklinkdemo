{"version":3,"sources":["View.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_react","require","_react2","_interopRequireDefault","_StyleSheetPropType","_StyleSheetPropType2","_ViewStylePropTypes","_ViewStylePropTypes2","_NativeMethodsMixin","_NativeMethodsMixin2","obj","__esModule","stylePropType","PropTypes","AccessibilityTraits","AccessibilityComponentType","forceTouchAvailable","statics","View","createClass","displayName","propTypes","accessible","bool","accessibilityLabel","string","accessibilityComponentType","oneOf","accessibilityLiveRegion","importantForAccessibility","accessibilityTraits","oneOfType","arrayOf","onAccessibilityTap","func","onMagicTap","testID","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","onStartShouldSetResponderCapture","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onLayout","pointerEvents","style","removeClippedSubviews","renderToHardwareTextureAndroid","shouldRasterizeIOS","collapsable","needsOffscreenAlphaCompositing","mixins","render","module","exports"],"mappings":"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","sourcesContent":["var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};/**\n * https://github.com/facebook/react-native/blob/master/Libraries/Components/View/View.js\n */\nvar _react=require('react');var _react2=_interopRequireDefault(_react);\nvar _StyleSheetPropType=require('../propTypes/StyleSheetPropType');var _StyleSheetPropType2=_interopRequireDefault(_StyleSheetPropType);\nvar _ViewStylePropTypes=require('../propTypes/ViewStylePropTypes');var _ViewStylePropTypes2=_interopRequireDefault(_ViewStylePropTypes);\nvar _NativeMethodsMixin=require('../mixins/NativeMethodsMixin');var _NativeMethodsMixin2=_interopRequireDefault(_NativeMethodsMixin);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}\n\nvar stylePropType=(0,_StyleSheetPropType2['default'])(_ViewStylePropTypes2['default']);var\n\nPropTypes=_react2['default'].PropTypes;\n\nvar AccessibilityTraits=[\n'none',\n'button',\n'link',\n'header',\n'search',\n'image',\n'selected',\n'plays',\n'key',\n'text',\n'summary',\n'disabled',\n'frequentUpdates',\n'startsMedia',\n'adjustable',\n'allowsDirectInteraction',\n'pageTurn'];\n\n\nvar AccessibilityComponentType=[\n'none',\n'button',\n'radiobutton_checked',\n'radiobutton_unchecked'];\n\n\n// TODO(lmr):\nvar forceTouchAvailable=false;\n\nvar statics={\nAccessibilityTraits:AccessibilityTraits,\nAccessibilityComponentType:AccessibilityComponentType,\n/**\n   * Is 3D Touch / Force Touch available (i.e. will touch events include `force`)\n   * @platform ios\n   */\nforceTouchAvailable:forceTouchAvailable};\n\n\nvar View=_react2['default'].createClass({displayName:'View',\npropTypes:{\n/**\n     * When true, indicates that the view is an accessibility element. By default,\n     * all the touchable elements are accessible.\n     */\naccessible:PropTypes.bool,\n\n/**\n     * Overrides the text that's read by the screen reader when the user interacts\n     * with the element. By default, the label is constructed by traversing all the\n     * children and accumulating all the Text nodes separated by space.\n     */\naccessibilityLabel:PropTypes.string,\n\n/**\n     * Indicates to accessibility services to treat UI component like a\n     * native one. Works for Android only.\n     * @platform android\n     */\naccessibilityComponentType:PropTypes.oneOf(AccessibilityComponentType),\n\n/**\n     * Indicates to accessibility services whether the user should be notified\n     * when this view changes. Works for Android API >= 19 only.\n     * See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion\n     * for references.\n     * @platform android\n     */\naccessibilityLiveRegion:PropTypes.oneOf([\n'none',\n'polite',\n'assertive']),\n\n\n/**\n     * Controls how view is important for accessibility which is if it\n     * fires accessibility events and if it is reported to accessibility services\n     * that query the screen. Works for Android only.\n     * See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility\n     * for references.\n     * Possible values:\n     * 'auto' - The system determines whether the view is important for accessibility -\n     *    default (recommended).\n     * 'yes' - The view is important for accessibility.\n     * 'no' - The view is not important for accessibility.\n     * 'no-hide-descendants' - The view is not important for accessibility,\n     *    nor are any of its descendant views.\n     *\n     * @platform android\n     */\nimportantForAccessibility:PropTypes.oneOf([\n'auto',\n'yes',\n'no',\n'no-hide-descendants']),\n\n\n/**\n     * Provides additional traits to screen reader. By default no traits are\n     * provided unless specified otherwise in element\n     * @platform ios\n     */\naccessibilityTraits:PropTypes.oneOfType([\nPropTypes.oneOf(AccessibilityTraits),\nPropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),\n\n\n/**\n     * When `accessible` is true, the system will try to invoke this function\n     * when the user performs accessibility tap gesture.\n     */\nonAccessibilityTap:PropTypes.func,\n\n/**\n     * When `accessible` is true, the system will invoke this function when the\n     * user performs the magic tap gesture.\n     */\nonMagicTap:PropTypes.func,\n\n/**\n     * Used to locate this view in end-to-end tests. NB: disables the 'layout-only\n     * view removal' optimization for this view!\n     */\ntestID:PropTypes.string,\n\n/**\n     * For most touch interactions, you'll simply want to wrap your component in\n     * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,\n     * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.\n     */\nonResponderGrant:PropTypes.func,\nonResponderMove:PropTypes.func,\nonResponderReject:PropTypes.func,\nonResponderRelease:PropTypes.func,\nonResponderTerminate:PropTypes.func,\nonResponderTerminationRequest:PropTypes.func,\nonStartShouldSetResponder:PropTypes.func,\nonStartShouldSetResponderCapture:PropTypes.func,\nonMoveShouldSetResponder:PropTypes.func,\nonMoveShouldSetResponderCapture:PropTypes.func,\n\n/**\n     * Invoked on mount and layout changes with\n     *\n     *   {nativeEvent: { layout: {x, y, width, height}}}.\n     *\n     * This event is fired immediately once the layout has been calculated, but\n     * the new layout may not yet be reflected on the screen at the time the\n     * event is received, especially if a layout animation is in progress.\n     */\nonLayout:PropTypes.func,\n\n/**\n     * In the absence of `auto` property, `none` is much like `CSS`'s `none`\n     * value. `box-none` is as if you had applied the `CSS` class:\n     *\n     * ```\n     * .box-none {\n     *   pointer-events: none;\n     * }\n     * .box-none * {\n     *   pointer-events: all;\n     * }\n     * ```\n     *\n     * `box-only` is the equivalent of\n     *\n     * ```\n     * .box-only {\n     *   pointer-events: all;\n     * }\n     * .box-only * {\n     *   pointer-events: none;\n     * }\n     * ```\n     *\n     * But since `pointerEvents` does not affect layout/appearance, and we are\n     * already deviating from the spec by adding additional modes, we opt to not\n     * include `pointerEvents` on `style`. On some platforms, we would need to\n     * implement it as a `className` anyways. Using `style` or not is an\n     * implementation detail of the platform.\n     */\npointerEvents:PropTypes.oneOf([\n'box-none',\n'none',\n'box-only',\n'auto']),\n\nstyle:stylePropType,\n\n/**\n     * This is a special performance property exposed by RCTView and is useful\n     * for scrolling content when there are many subviews, most of which are\n     * offscreen. For this property to be effective, it must be applied to a\n     * view that contains many subviews that extend outside its bound. The\n     * subviews must also have overflow: hidden, as should the containing view\n     * (or one of its superviews).\n     */\nremoveClippedSubviews:PropTypes.bool,\n\n/**\n     * Whether this view should render itself (and all of its children) into a\n     * single hardware texture on the GPU.\n     *\n     * On Android, this is useful for animations and interactions that only\n     * modify opacity, rotation, translation, and/or scale: in those cases, the\n     * view doesn't have to be redrawn and display lists don't need to be\n     * re-executed. The texture can just be re-used and re-composited with\n     * different parameters. The downside is that this can use up limited video\n     * memory, so this prop should be set back to false at the end of the\n     * interaction/animation.\n     * @platform android\n     */\nrenderToHardwareTextureAndroid:PropTypes.bool,\n\n/**\n     * Whether this view should be rendered as a bitmap before compositing.\n     *\n     * On iOS, this is useful for animations and interactions that do not\n     * modify this component's dimensions nor its children; for example, when\n     * translating the position of a static view, rasterization allows the\n     * renderer to reuse a cached bitmap of a static view and quickly composite\n     * it during each frame.\n     *\n     * Rasterization incurs an off-screen drawing pass and the bitmap consumes\n     * memory. Test and measure when using this property.\n     * @platform ios\n     */\nshouldRasterizeIOS:PropTypes.bool,\n\n/**\n     * Views that are only used to layout their children or otherwise don't draw\n     * anything may be automatically removed from the native hierarchy as an\n     * optimization. Set this property to `false` to disable this optimization and\n     * ensure that this View exists in the native view hierarchy.\n     * @platform android\n     */\ncollapsable:PropTypes.bool,\n\n/**\n     * Whether this view needs to rendered offscreen and composited with an alpha\n     * in order to preserve 100% correct colors and blending behavior. The default\n     * (false) falls back to drawing the component and its children with an alpha\n     * applied to the paint used to draw each element instead of rendering the full\n     * component offscreen and compositing it back with an alpha value. This default\n     * may be noticeable and undesired in the case where the View you are setting\n     * an opacity on has multiple overlapping elements (e.g. multiple overlapping\n     * Views, or text and a background).\n     *\n     * Rendering offscreen to preserve correct alpha behavior is extremely\n     * expensive and hard to debug for non-native developers, which is why it is\n     * not turned on by default. If you do need to enable this property for an\n     * animation, consider combining it with renderToHardwareTextureAndroid if the\n     * view **contents** are static (i.e. it doesn't need to be redrawn each frame).\n     * If that property is enabled, this View will be rendered off-screen once,\n     * saved in a hardware texture, and then composited onto the screen with an alpha\n     * each frame without having to switch rendering targets on the GPU.\n     *\n     * @platform android\n     */\nneedsOffscreenAlphaCompositing:PropTypes.bool},\n\n\nmixins:[_NativeMethodsMixin2['default']],\n\nstatics:_extends({},\nstatics),\n\n\nrender:function(){function render(){\nreturn null;\n}return render;}()});\n\n\nmodule.exports=View;"]}